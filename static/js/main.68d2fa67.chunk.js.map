{"version":3,"sources":["data-service.js","utils.js","countries.jsx","country.jsx","App.js","serviceWorker.js","index.js"],"names":["DataService","confirmedData","map","obj","getCountryData","country","countryName","countryConfirmed","find","c","countryRecovered","recoveredData","countryDeaths","deathsData","countryData","name","summary","confirmed","new","total","recovered","deaths","closed","active","timeline","Object","keys","key","date","confirmedNew","confirmedTotal","deathsNew","deathsTotal","recoveredNew","recoveredTotal","closedNew","closedTotal","activeNew","activeTotal","countries","data","d","forEach","confirmedTimeline","Utils","n","String","replace","color","i","Math","floor","random","colors","length","CONFIRMED_COLOR","RECOVERED_COLOR","DECEASED_COLOR","ACTIVE_COLOR","CLOSED_COLOR","Countries","List","valueNames","sort","order","getVerboseData","world","pop","activeRate","toFixed","recoveredRateTotal","recoveredRateClosed","deathRateTotal","deathRateClosed","chartCountries","getConfirmedTimelines","Container","Row","className","Col","href","target","rel","id","CardDeck","Card","Header","style","backgroundColor","Body","Title","formattedNumber","height","margin","dataKey","stroke","fill","fontSize","strokeDasharray","verticalAlign","type","fillOpacity","dot","strokeWidth","index","legendType","activeDot","colSpan","placeholder","data-sort","icon","faSort","Component","Country","props","params","match","this","outcomeData","value","RADIAN","PI","width","stackId","stackOffset","labelLine","label","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin","console","log","textAnchor","dominantBaseline","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68d2fa67.chunk.js","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n    static getVerboseData() {\n        var data = confirmedData.map(function (obj) {\n            return DataService.getCountryData(obj.country);\n        });\n        \n        return data;\n    }\n\n    static getCountryData(countryName) {\n        var countryConfirmed = confirmedData.find(c => c.country === countryName);\n        var countryRecovered = recoveredData.find(c => c.country === countryName);\n        var countryDeaths = deathsData.find(c => c.country === countryName);\n\n        var countryData = {\n            name: countryName,\n            summary: {\n                confirmed: {\n                    new: countryConfirmed.total.new,\n                    total: countryConfirmed.total.total,\n                },\n                recovered: {\n                    new: countryRecovered.total.new,\n                    total: countryRecovered.total.total,\n                },\n                deaths: {\n                    new: countryDeaths.total.new,\n                    total: countryDeaths.total.total,\n                },\n                closed: {\n                    new: countryDeaths.total.new + countryRecovered.total.new,\n                    total: countryDeaths.total.total + countryRecovered.total.total\n                },\n                active: {\n                    new: countryConfirmed.total.new - (countryDeaths.total.new + countryRecovered.total.new),\n                    total: countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total)\n                }\n            },\n            timeline: {}\n        };\n\n        countryData.timeline = Object.keys(countryConfirmed.timeline).map(function (key) {\n            return {\n                date: key,\n                confirmedNew: countryConfirmed.timeline[key].new,\n                confirmedTotal: countryConfirmed.timeline[key].total,\n                deathsNew: countryDeaths.timeline[key].new,\n                deathsTotal: countryDeaths.timeline[key].total,\n                recoveredNew: countryRecovered.timeline[key].new,\n                recoveredTotal: countryRecovered.timeline[key].total,\n                closedNew: countryDeaths.timeline[key].new + countryRecovered.timeline[key].new,\n                closedTotal: countryDeaths.timeline[key].total + countryRecovered.timeline[key].total,\n                activeNew: countryConfirmed.timeline[key].new - (countryDeaths.timeline[key].new + countryRecovered.timeline[key].new),\n                activeTotal: countryConfirmed.timeline[key].total - (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total)\n            };\n        });\n\n        // console.log(countryData)\n        return countryData;\n    }\n\n    static getConfirmedTimelines(countries) {\n        // get all dates\n        var dates = Object.keys(confirmedData[0].timeline).map(function (d) {\n            return d\n        });\n\n        var data = dates.map(function (d) {\n            return {\n                date: d\n            }\n        });\n\n\n        countries.forEach(function (countryName) {\n            var confirmedTimeline = confirmedData.find(c => c.country === countryName);\n            data.forEach(function (obj) {\n                obj[countryName] = confirmedTimeline.timeline[obj.date].total;\n            });\n        });\n\n        // console.log(data);\n        return data;\n    }\n}","export default class Utils {\n    static formattedNumber(n) {\n        return String(n).replace(/(.)(?=(\\d{3})+$)/g, '$1 ')\n    }\n\n    static getRandomHexaColorCode() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    static getRandomColor() {\n        var colors = ['red', 'blue', 'green', 'black', 'orange'];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n}\n\nUtils.CONFIRMED_COLOR = \"#ffc658\";\nUtils.RECOVERED_COLOR = \"#82ca9d\";\nUtils.DECEASED_COLOR = \"#1c1c1c\";\nUtils.ACTIVE_COLOR = \"#fca085\";\nUtils.CLOSED_COLOR = \"#8884d8\";\n\n","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container, Card, CardDeck, Row, Col } from 'react-bootstrap';\nimport \"list.js\";\nimport List from 'list.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport Utils from './utils';\nimport { XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, AreaChart, Area, ComposedChart } from 'recharts';\n\nexport default class Countries extends Component {\n    componentDidMount() {\n        var options = {\n            valueNames: ['name', 'confirmedTotal', 'confirmedNew', 'deathsTotal', 'deathsNew', 'recoveredTotal', 'recoveredNew']\n        };\n\n        var countriesList = new List('countries', options);\n        countriesList.sort('confirmedTotal', { order: \"desc\" });\n    }\n\n    render() {\n        var data = DataService.getVerboseData()\n        var world = data.find(c => c.name === 'World');\n        data.pop(world);\n\n        var activeRate = (world.summary.active.total / world.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateTotal = (world.summary.recovered.total / world.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateClosed = (world.summary.recovered.total / world.summary.closed.total * 100).toFixed(1);\n        var deathRateTotal = (world.summary.deaths.total / world.summary.confirmed.total * 100).toFixed(1);\n        var deathRateClosed = (world.summary.deaths.total / world.summary.closed.total * 100).toFixed(1);\n\n        var colors = ['red', 'blue', 'green', 'black', 'orange', 'brown', 'blueviolet'];\n\n\n        var chartCountries = ['Spain', 'Italy', 'France', 'Germany', 'China', 'Romania']\n        var confirmedTimeline = DataService.getConfirmedTimelines(chartCountries);\n\n        return (\n            <Container>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>COVID-19</h1></Col>\n                    <Col className=\"text-right\"><a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\" rel=\"noopener noreferrer\">data source</a></Col>\n                </Row>\n                <hr />\n                <Container id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\" }}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.confirmed.total)}<br />&nbsp;<br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR} />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\" }}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.active.total)}<br /><small className=\"text-muted\">{activeRate}% out of total</small><br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\" }}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.recovered.total)}<br /><small className=\"text-muted\">{recoveredRateTotal}% out of total</small><br /><small className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\" }}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.deaths.total)}<br /><small className=\"text-muted\">{deathRateTotal}% out of total</small><br /><small className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container id=\"charts\">\n                    <Card>\n                        <Card.Header>Total cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <ComposedChart data={world.timeline} style={{ margin: \"0 auto\" }} fontSize={10}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                    <Line name=\"total active\" dot={false} dataKey=\"activeTotal\" stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\" />\n                                </ComposedChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={300}>\n                                <LineChart data={confirmedTimeline} style={{ margin: \"0 auto\" }} fontSize={10}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    {\n                                        chartCountries.map((country, index) =>\n                                            <Line key={index} dataKey={country} legendType=\"square\" dot={false} strokeWidth=\"3\" activeDot={true} stroke={colors[index]} />\n                                        )\n                                    }\n                                </LineChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                </Container>\n                <Container id=\"countries\">\n                    <table className=\"table table-condensed table-hover\">\n                        <thead>\n                            <tr>\n                                <th colSpan=\"3\"><input className=\"search\" placeholder=\"Filter\" /></th>\n                                <th colSpan=\"2\">Confirmed</th>\n                                <th colSpan=\"2\">Deaths</th>\n                                <th colSpan=\"2\">Recovered</th>\n                            </tr>\n                            <tr>\n                                <td className=\"sort\" data-sort=\"name\">Country <FontAwesomeIcon icon={faSort} /></td>\n                                <td></td>\n                                <td></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"recoveredTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"recoveredNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                            </tr>\n                        </thead>\n                        <tbody className=\"list\">\n                            {\n                                data.map((country, index) =>\n                                    <tr key={index}>\n                                        <td className=\"text-left name\"><a href={\"#/\" + country.name} target=\"_blank\" rel=\"noopener noreferrer\">{country.name}</a></td>\n                                        <td>\n                                            {/* <ResponsiveContainer height={50}>\n                                                <BarChart data={country.timeline} style={{ margin: \"0 auto\" }}>\n                                                    <Bar dataKey=\"confirmedNew\" stroke={Utils.CONFIRMED_COLOR} />\n                                                </BarChart>\n                                            </ResponsiveContainer> */}\n                                        </td>\n                                        <td>\n                                            {/* <ResponsiveContainer height={50}>\n                                                <BarChart data={country.timeline} style={{ margin: \"0 auto\" }}>\n                                                    <Bar dataKey=\"activeTotal\" stroke={Utils.ACTIVE_COLOR} />\n                                                </BarChart>\n                                            </ResponsiveContainer> */}\n                                        </td>\n                                        <td className=\"text-right confirmedTotal\">{country.summary.confirmed.total}</td>\n                                        <td className=\"text-right confirmedNew\">{country.summary.confirmed.new}</td>\n                                        <td className=\"text-right deathsTotal\">{country.summary.deaths.total}</td>\n                                        <td className=\"text-right deathsNew\">{country.summary.deaths.new}</td>\n                                        <td className=\"text-right recoveredTotal\">{country.summary.recovered.total}</td>\n                                        <td className=\"text-right recoveredNew\">{country.summary.recovered.new}</td>\n                                    </tr>)\n                            }\n                        </tbody>\n                    </table>\n                    <div>Data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a></div>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container, Card, CardDeck, Row, Col } from 'react-bootstrap'\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Area, Tooltip, Legend, BarChart, Bar, ResponsiveContainer, LineChart, Line, ComposedChart, PieChart, Pie, Cell } from 'recharts';\nimport Utils from './utils';\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const { params } = this.props.match;\n        this.countryName = params.countryName;\n    }\n    render() {\n        var data = DataService.getCountryData(this.countryName);\n\n        var activeRate = (data.summary.active.total / data.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateTotal = (data.summary.recovered.total / data.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateClosed = (data.summary.recovered.total / data.summary.closed.total * 100).toFixed(1);\n        var deathRateTotal = (data.summary.deaths.total / data.summary.confirmed.total * 100).toFixed(1);\n        var deathRateClosed = (data.summary.deaths.total / data.summary.closed.total * 100).toFixed(1);\n\n        var outcomeData = [\n            { name: \"Recovered\", value: data.summary.recovered.total },\n            { name: \"Deceased\", value: data.summary.deaths.total }\n        ]\n\n        const RADIAN = Math.PI / 180;\n        const renderCustomizedLabel = ({\n            cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n        }) => {\n            const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n            const x = cx + radius * Math.cos(-midAngle * RADIAN);\n            const y = cy + radius * Math.sin(-midAngle * RADIAN);\n            console.log(x)\n\n            return (\n                <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                    {`${(percent * 100).toFixed(0)}%`}\n                </text>\n            );\n        };\n\n        return (\n            <Container>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>{this.countryName}</h1></Col>\n                    <Col className=\"text-right\"><a href=\"#/\">All countries</a></Col>\n                </Row>\n                <hr />\n                <Container id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\" }}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.confirmed.total)}<br />&nbsp;<br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR} />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\" }}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.active.total)}<br /><small className=\"text-muted\">{activeRate}% out of total</small><br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\" }}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.recovered.total)}<br /><small className=\"text-muted\">{recoveredRateTotal}% out of total</small><br /><small className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\" }}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.deaths.total)}<br /><small className=\"text-muted\">{deathRateTotal}% out of total</small><br /><small className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container id=\"charts\">\n                    <Card>\n                        <Card.Header>Total cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <ComposedChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                    <Line name=\"total active\" dot={false} dataKey=\"activeTotal\" stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\" />\n                                </ComposedChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Daily cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <BarChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Bar name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                    <Bar name=\"recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.RECOVERED_COLOR} />\n                                    <Bar name=\"deceased\" type=\"monotone\" dataKey=\"deathsNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.DECEASED_COLOR} />\n                                </BarChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <BarChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Bar name=\"new confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                </BarChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <LineChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Line name=\"new confirmed cases\" dot={false} strokeWidth=\"3\" dataKey=\"confirmedNew\" stroke={Utils.CONFIRMED_COLOR} />\n                                    <Line name=\"new recovered cases\" dot={false} strokeWidth=\"3\" dataKey=\"recoveredNew\" stroke={Utils.RECOVERED_COLOR} />\n                                </LineChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Active vs closed cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"active\" type=\"monotone\" dataKey=\"activeTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.ACTIVE_COLOR} />\n                                    <Area name=\"closed (recovered + deceased)\" type=\"monotone\" dataKey=\"closedTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CLOSED_COLOR} />\n                                </AreaChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <LineChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Line name=\"active\" dot={false} strokeWidth=\"3\" dataKey=\"activeTotal\" stroke={Utils.ACTIVE_COLOR} />\n                                    <Line name=\"closed (recovered + deceased)\" dot={false} strokeWidth=\"3\" dataKey=\"closedTotal\" stroke={Utils.CLOSED_COLOR} />\n                                </LineChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }} stackOffset=\"expand\">\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total active\" type=\"monotone\" dataKey=\"activeTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.ACTIVE_COLOR} />\n                                    <Area name=\"total recovered\" type=\"monotone\" dataKey=\"recoveredTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.RECOVERED_COLOR} />\n                                    <Area name=\"total deceased\" type=\"monotone\" dataKey=\"deathsTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.DECEASED_COLOR} />\n                                </AreaChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Cases outcome</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <PieChart>\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Pie\n                                        labelLine={false}\n                                        label={renderCustomizedLabel}\n                                        outerRadius={80}\n                                        data={outcomeData}\n                                        dataKey=\"value\" >\n                                        <Cell key={`cell-0`} fill={Utils.RECOVERED_COLOR} />\n                                        <Cell key={`cell-1`} fill={Utils.DECEASED_COLOR} />\n                                    </Pie>\n                                </PieChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Countries from './countries';\nimport Country from './country';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter basename='/covid-19'>\n          <Switch>\n            <Route exact path={'/'} component={Countries} />\n            <Route path={'/:countryName'} component={Country} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}