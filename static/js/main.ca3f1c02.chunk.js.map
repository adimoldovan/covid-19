{"version":3,"sources":["data-service.js","countries.jsx","country.jsx","App.js","serviceWorker.js","index.js"],"names":["DataService","countries","confirmedData","map","val","name","country","confirmed","total","recovered","deaths","getCountryData","list","countryName","i","length","forEach","item","recoveredData","deathsData","console","log","timeline","Countries","props","List","valueNames","sort","order","data","getCountriesSummaryData","totalConfirmed","totalRecovered","totalDeceased","Object","keys","key","Container","Row","className","Col","href","id","CardDeck","Card","Header","Body","Title","placeholder","colSpan","data-sort","icon","faSort","index","target","rel","new","Component","Country","params","match","summaryData","countrySummaryData","find","c","closed","active","dead","activeRate","toFixed","recoveredRateTotal","recoveredRateClosed","deathRateTotal","deathRateClosed","rawTimelineData","getCountriesTimelineData","date","confirmedTotal","confirmedNew","recoveredTotal","recoveredNew","deathsTotal","deathsNew","confirmedColor","recoveredColor","deathsColor","activeColor","closedColor","this","height","style","margin","type","dataKey","stroke","fill","strokeDasharray","verticalAlign","fillOpacity","width","stackId","stackOffset","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca3f1c02.chunk.js","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n\n    static getCountriesSummaryData() {\n        let countries = confirmedData.map(function (val) {\n            return { name: val.country, confirmed: val.total, recovered: {}, deaths: {} };\n        })\n\n        countries.forEach(populateCountryData)\n\n        function populateCountryData(item) {\n            item.recovered = getCountryData(recoveredData, item.name)\n            item.deaths = getCountryData(deathsData, item.name)\n        }\n\n        function getCountryData(list, countryName) {\n            for (var i = 0; i < list.length; i++) {\n                if (list[i].country === countryName) {\n                    return list[i].total;\n                }\n            }\n        }\n\n        console.log(countries)\n        return countries;\n    }\n\n    static getCountriesTimelineData() {\n        let countries = confirmedData.map(function (val) {\n            return { name: val.country, confirmed: val.timeline, recovered: {}, deaths: {} };\n        })\n\n        countries.forEach(populateCountryData)\n\n        function populateCountryData(item) {\n            item.recovered = getCountryData(recoveredData, item.name)\n            item.deaths = getCountryData(deathsData, item.name)\n        }\n\n        function getCountryData(list, countryName) {\n            for (var i = 0; i < list.length; i++) {\n                if (list[i].country === countryName) {\n                    return list[i].timeline;\n                }\n            }\n        }\n\n        console.log(countries)\n        return countries;\n    }\n}","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container, Card, CardDeck, Row, Col } from 'react-bootstrap';\nimport \"list.js\";\nimport List from 'list.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Countries extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        var options = {\n            valueNames: ['name', 'confirmedTotal', 'confirmedNew', 'deathsTotal', 'deathsNew', 'recoveredTotal', 'recoveredNew']\n        };\n\n        var countriesList = new List('countries', options);\n        countriesList.sort('confirmedTotal', { order: \"desc\" });\n    }\n\n    render() {\n        var data = DataService.getCountriesSummaryData()\n        var totalConfirmed = 0;\n        var totalActive = 0;\n        var totalRecovered = 0;\n        var totalDeceased = 0;\n        var totalClosed = 0;\n\n        Object.keys(data).map(function (key) {\n            totalConfirmed = totalConfirmed + data[key].confirmed.total;\n            totalRecovered = totalRecovered + data[key].recovered.total;\n            totalDeceased = totalDeceased + data[key].deaths.total;\n        });\n\n\n        return (\n            <Container>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>COVID-19</h1></Col>\n                    <Col className=\"text-right\"><a href=\"https://github.com/CSSEGISandData/COVID-19\">data source</a></Col>\n                </Row>\n                <hr />\n                <Container id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>{totalConfirmed}</Card.Title>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>{totalConfirmed}</Card.Title>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>{totalRecovered}</Card.Title>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>{totalDeceased}</Card.Title>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container id=\"countries\">\n                    <table className=\"table table-condensed table-hover\">\n                        <thead>\n                            <tr>\n                                <th><input className=\"search\" placeholder=\"Filter\" /></th>\n                                <th colSpan=\"2\">Confirmed</th>\n                                <th colSpan=\"2\">Deaths</th>\n                                <th colSpan=\"2\">Recovered</th>\n                            </tr>\n                            <tr>\n                                <td className=\"sort\" data-sort=\"name\">Country <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"recoveredTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"recoveredNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                            </tr>\n                        </thead>\n                        <tbody className=\"list\">\n                            {\n                                data.map((country, index) =>\n                                    <tr key={index}>\n                                        <td className=\"text-left name\"><a href={\"#/\" + country.name} target=\"_blank\" rel=\"noopener noreferrer\">{country.name}</a></td>\n                                        <td className=\"text-right confirmedTotal\">{country.confirmed.total}</td>\n                                        <td className=\"text-right confirmedNew\">{country.confirmed.new}</td>\n                                        <td className=\"text-right deathsTotal\">{country.deaths.total}</td>\n                                        <td className=\"text-right deathsNew\">{country.deaths.new}</td>\n                                        <td className=\"text-right recoveredTotal\">{country.recovered.total}</td>\n                                        <td className=\"text-right recoveredNew\">{country.recovered.new}</td>\n                                    </tr>)\n                            }\n                        </tbody>\n                    </table>\n                    <div>Data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a></div>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container, Card, CardDeck, Row, Col } from 'react-bootstrap'\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Area, Tooltip, Legend, BarChart, Bar, ResponsiveContainer, LineChart, Line, ComposedChart } from 'recharts';\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const { params } = this.props.match\n\n        var summaryData = DataService.getCountriesSummaryData();\n        this.countrySummaryData = summaryData.find(c => c.name === params.countryName);\n\n        this.confirmed = this.countrySummaryData.confirmed.total\n        this.closed = this.countrySummaryData.recovered.total + this.countrySummaryData.deaths.total\n        this.active = this.confirmed - this.closed\n        this.recovered = this.countrySummaryData.recovered.total\n        this.dead = this.countrySummaryData.deaths.total\n\n        this.activeRate = (this.active / this.confirmed * 100).toFixed(1);\n        this.recoveredRateTotal = (this.recovered / this.confirmed * 100).toFixed(1);\n        this.recoveredRateClosed = (this.recovered / this.closed * 100).toFixed(1);\n        this.deathRateTotal = (this.dead / this.confirmed * 100).toFixed(1);\n        this.deathRateClosed = (this.dead / this.closed * 100).toFixed(1);\n\n\n\n        var rawTimelineData = DataService.getCountriesTimelineData().find(c => c.name === params.countryName);\n\n        this.timeline = Object.keys(rawTimelineData.confirmed).map(function (key) {\n            return {\n                date: key,\n                confirmedTotal: rawTimelineData.confirmed[key].total,\n                confirmedNew: rawTimelineData.confirmed[key].new,\n                recoveredTotal: rawTimelineData.recovered[key].total,\n                recoveredNew: rawTimelineData.recovered[key].new,\n                deathsTotal: rawTimelineData.deaths[key].total,\n                deathsNew: rawTimelineData.deaths[key].new,\n                active: rawTimelineData.confirmed[key].total - (rawTimelineData.recovered[key].total + rawTimelineData.deaths[key].total),\n                closed: rawTimelineData.recovered[key].total + rawTimelineData.deaths[key].total\n            };\n        });\n\n        console.log(this.timeline);\n\n        this.confirmedColor = \"#ffc658\";\n        this.recoveredColor = \"#82ca9d\";\n        this.deathsColor = \"#1c1c1c\";\n        this.activeColor = \"#fca085\";\n        this.closedColor = \"#8884d8\";\n    }\n    render() {\n        return (\n            <Container>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>{this.countrySummaryData.name}</h1></Col>\n                    <Col className=\"text-right\"><a href=\"#/\">All countries</a></Col>\n                </Row>\n                <hr />\n                <Container id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {this.confirmed}<br />&nbsp;<br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <BarChart data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Bar name=\"confirmedNew\" type=\"monotone\" dataKey=\"confirmedNew\" stroke={this.confirmedColor} />\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {this.active}<br /><small className=\"text-muted\">{this.activeRate}% out of total</small><br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area name=\"active\" type=\"monotone\" dataKey=\"active\" fill={this.activeColor} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {this.recovered}<br /><small className=\"text-muted\">{this.recoveredRateTotal}% out of total</small><br /><small className=\"text-muted\">{this.recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area name=\"active\" type=\"monotone\" dataKey=\"recoveredTotal\" fill={this.recoveredColor} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {this.dead}<br /><small className=\"text-muted\">{this.deathRateTotal}% out of total</small><br /><small className=\"text-muted\">{this.deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <BarChart data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Bar name=\"active\" type=\"monotone\" dataKey=\"deathsNew\" fill={this.deathsColor} stroke=\"none\" />\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container id=\"charts\">\n                    <Card>\n                        <Card.Header>Total cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <ComposedChart data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\" stroke=\"none\" fillOpacity={0.5} fill={this.confirmedColor} />\n                                    <Line name=\"total active\" type=\"monotone\" dataKey=\"active\" stroke={this.activeColor} />\n                                </ComposedChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Daily cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <BarChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Bar name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.confirmedColor} />\n                                    <Bar name=\"recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.recoveredColor} />\n                                    <Bar name=\"deceased\" type=\"monotone\" dataKey=\"deathsNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.deathsColor} />\n                                </BarChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <BarChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Bar name=\"new confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\" fillOpacity={0.5} fill={this.confirmedColor} />\n                                </BarChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <LineChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Line name=\"new confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\" stroke={this.confirmedColor} />\n                                    <Line name=\"new recovered cases\" type=\"monotone\" dataKey=\"recoveredNew\" stroke={this.recoveredColor} />\n                                </LineChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Active vs closed cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"active\" type=\"monotone\" dataKey=\"active\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.activeColor} />\n                                    <Area name=\"closed (recovered + deceased)\" type=\"monotone\" dataKey=\"closed\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.closedColor} />\n                                </AreaChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <LineChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Line name=\"active\" type=\"monotone\" dataKey=\"active\" stroke={this.activeColor} />\n                                    <Line name=\"closed (recovered + deaths)\" type=\"monotone\" dataKey=\"closed\" stroke={this.closedColor} />\n                                </LineChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }} stackOffset=\"expand\">\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total active\" type=\"monotone\" dataKey=\"active\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.activeColor} />\n                                    <Area name=\"total recovered\" type=\"monotone\" dataKey=\"recoveredTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.recoveredColor} />\n                                    <Area name=\"total deaths\" type=\"monotone\" dataKey=\"deathsTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.deathsColor} />\n                                </AreaChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Cases outcome</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <LineChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Line name=\"deceased\" type=\"monotone\" dataKey=\"deathsTotal\" stackId=\"1\" stroke={this.deathsColor} />\n                                    <Line name=\"recovered\" type=\"monotone\" dataKey=\"recoveredTotal\" stackId=\"1\"stroke={this.recoveredColor} />\n                                </LineChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart width={730} height={250} data={this.timeline} style={{ margin: \"0 auto\" }} stackOffset=\"expand\">\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"recovered\" type=\"monotone\" dataKey=\"recoveredTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.recoveredColor} />\n                                    <Area name=\"deceased\" type=\"monotone\" dataKey=\"deathsTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.deathsColor} />\n                                </AreaChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Countries from './countries';\nimport Country from './country';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter basename='/covid-19'>\n          <Switch>\n            <Route exact path={'/'} component={Countries} />\n            <Route path={'/:countryName'} component={Country} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}