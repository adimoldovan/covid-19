{"version":3,"sources":["data-service.js","utils.js","countries.jsx","country.jsx","App.js","serviceWorker.js","index.js"],"names":["DataService","confirmedData","map","obj","getCountryData","country","countryName","countryConfirmed","find","c","countryRecovered","recoveredData","countryDeaths","deathsData","countryData","name","population","summary","confirmed","new","total","new1Mil","parseInt","total1Mil","recovered","deaths","closed","active","timeline","Object","keys","key","date","confirmedNew","confirmedTotal","deathsNew","deathsTotal","recoveredNew","recoveredTotal","closedNew","closedTotal","activeNew","activeTotal","deathRateClosedCases","Number","toFixed","deathRateTotalCases","countries","data","d","forEach","confirmedTimeline","Utils","n","String","replace","color","i","Math","floor","random","colors","length","CONFIRMED_COLOR","RECOVERED_COLOR","DECEASED_COLOR","ACTIVE_COLOR","CLOSED_COLOR","require","Countries","List","valueNames","sort","order","getVerboseData","world","pop","activeRate","recoveredRateTotal","recoveredRateClosed","deathRateTotal","deathRateClosed","mapData","nameTranslator","console","log","nameMatch","countryMapData","value","push","option","title","text","left","tooltip","trigger","visualMap","min","max","inRange","calculable","series","type","mapType","roam","emphasis","itemStyle","areaColor","label","normal","show","Container","fluid","Row","className","Col","href","target","rel","id","CardDeck","Card","Header","style","backgroundColor","Body","Title","formattedNumber","height","margin","dataKey","stroke","fill","width","fontSize","strokeDasharray","verticalAlign","fillOpacity","dot","strokeWidth","placeholder","colSpan","data-sort","icon","faSort","index","Component","Country","props","params","match","this","outcomeData","timelineSliced","slice","RADIAN","PI","domain","stackOffset","stackId","border","labelLine","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin","textAnchor","dominantBaseline","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6d504b2.chunk.js","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n    static getVerboseData() {\n        var data = confirmedData.map(function (obj) {\n            return DataService.getCountryData(obj.country);\n        });\n\n        return data;\n    }\n\n    static getCountryData(countryName) {\n        var countryConfirmed = confirmedData.find(c => c.country === countryName);\n        var countryRecovered = recoveredData.find(c => c.country === countryName);\n        var countryDeaths = deathsData.find(c => c.country === countryName);\n\n        var countryData = {\n            name: countryName,\n            population: countryConfirmed.population,\n            summary: {\n                confirmed: {\n                    new: countryConfirmed.total.new,\n                    new1Mil: parseInt((countryConfirmed.total.new / parseInt(countryConfirmed.population)) * 1000000),\n                    total: countryConfirmed.total.total,\n                    total1Mil: parseInt((countryConfirmed.total.total / parseInt(countryConfirmed.population)) * 1000000),\n                },\n                recovered: {\n                    new: countryRecovered.total.new,\n                    total: countryRecovered.total.total,\n                },\n                deaths: {\n                    new: countryDeaths.total.new,\n                    new1Mil: parseInt((countryDeaths.total.new / parseInt(countryDeaths.population)) * 1000000),\n                    total: countryDeaths.total.total,\n                    total1Mil: parseInt((countryDeaths.total.total / parseInt(countryDeaths.population)) * 1000000),\n                },\n                closed: {\n                    new: countryDeaths.total.new + countryRecovered.total.new,\n                    total: countryDeaths.total.total + countryRecovered.total.total\n                },\n                active: {\n                    new: countryConfirmed.total.new - (countryDeaths.total.new + countryRecovered.total.new),\n                    total: countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total)\n                }\n            },\n            timeline: {}\n        };\n\n        countryData.timeline = Object.keys(countryConfirmed.timeline).map(function (key) {\n            return {\n                date: key,\n                confirmedNew: countryConfirmed.timeline[key].new,\n                confirmedTotal: countryConfirmed.timeline[key].total,\n                deathsNew: countryDeaths.timeline[key].new,\n                deathsTotal: countryDeaths.timeline[key].total,\n                recoveredNew: countryRecovered.timeline[key].new,\n                recoveredTotal: countryRecovered.timeline[key].total,\n                closedNew: countryDeaths.timeline[key].new + countryRecovered.timeline[key].new,\n                closedTotal: countryDeaths.timeline[key].total + countryRecovered.timeline[key].total,\n                activeNew: countryConfirmed.timeline[key].new - (countryDeaths.timeline[key].new + countryRecovered.timeline[key].new),\n                activeTotal: countryConfirmed.timeline[key].total - (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total),\n                deathRateClosedCases: Number(((countryDeaths.timeline[key].total / (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total)) * 100).toFixed(1)),\n                deathRateTotalCases: Number(((countryDeaths.timeline[key].total / countryConfirmed.timeline[key].total) * 100).toFixed(1))\n            };\n        });\n\n        // console.log(countryData)\n        return countryData;\n    }\n\n    static getConfirmedTimelines(countries) {\n        // get all dates\n        var dates = Object.keys(confirmedData[0].timeline).map(function (d) {\n            return d\n        });\n\n        var data = dates.map(function (d) {\n            return {\n                date: d\n            }\n        });\n\n\n        countries.forEach(function (countryName) {\n            var confirmedTimeline = confirmedData.find(c => c.country === countryName);\n            data.forEach(function (obj) {\n                obj[countryName] = confirmedTimeline.timeline[obj.date].total;\n            });\n        });\n\n        // console.log(data);\n        return data;\n    }\n}","export default class Utils {\n    static formattedNumber(n) {\n        return String(n).replace(/(.)(?=(\\d{3})+$)/g, '$1 ')\n    }\n\n    static getRandomHexaColorCode() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    static getRandomColor() {\n        var colors = ['red', 'blue', 'green', 'black', 'orange'];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n}\n\nUtils.CONFIRMED_COLOR = \"#ffc658\";\nUtils.RECOVERED_COLOR = \"#82ca9d\";\nUtils.DECEASED_COLOR = \"#1c1c1c\";\nUtils.ACTIVE_COLOR = \"#fca085\";\nUtils.CLOSED_COLOR = \"#8884d8\";\n\n","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container, Card, CardDeck, Row, Col } from 'react-bootstrap';\nimport \"list.js\";\nimport List from 'list.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport Utils from './utils';\nimport { XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Line, AreaChart, Area, ComposedChart } from 'recharts';\nimport ReactEcharts from 'echarts-for-react';\nrequire('echarts/map/js/world.js');\n\nexport default class Countries extends Component {\n    componentDidMount() {\n        var options = {\n            valueNames: ['name', 'confirmedTotal', 'confirmedTotal1Mil', 'confirmedNew', 'confirmedNew1Mil', 'deathsTotal', 'deathsTotal1Mil', 'deathsNew', 'deathsNew1Mil', 'recoveredTotal', 'recoveredNew', 'population']\n        };\n\n        var countriesList = new List('countries', options);\n        countriesList.sort('confirmedTotal', { order: \"desc\" });\n    }\n\n    render() {\n        var data = DataService.getVerboseData()\n        var world = data.find(c => c.name === 'World');\n        data.pop(world);\n\n        var activeRate = (world.summary.active.total / world.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateTotal = (world.summary.recovered.total / world.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateClosed = (world.summary.recovered.total / world.summary.closed.total * 100).toFixed(1);\n        var deathRateTotal = (world.summary.deaths.total / world.summary.confirmed.total * 100).toFixed(1);\n        var deathRateClosed = (world.summary.deaths.total / world.summary.closed.total * 100).toFixed(1);\n\n        var mapData = [];\n\n        var nameTranslator = {\n            'US': 'United States',\n            'South Sudan': 'S. Sudan',\n            'Western Sahara': 'W. Sahara',\n            'Cote d\\'Ivoire': 'Cote d\\'Ivoire',\n            'Central African Republic': 'Central African Rep.',\n            'Congo (Kinshasa)': 'Dem. Rep. Congo',\n            'Congo (Brazzaville)': 'Congo',\n            'Czechia': 'Czech Rep.',\n            'Bosnia and Herzegovina': 'Bosnia and Herz.',\n            'North Macedonia': 'Macedonia',\n            'Korea, South': 'Korea',\n            'Dominican Republic': 'Dominican Rep.',\n            'Laos': 'Lao PDR',\n            'Burma': 'Myanmar'\n        }\n\n        console.log(nameTranslator['US'])\n\n        data.forEach(function (country) {\n            var nameMatch = nameTranslator[country.name]\n            var translatedName = (nameMatch) ? nameMatch : country.name\n            var countryMapData = {\n                name: translatedName,\n                value: country.summary.confirmed.total1Mil\n            };\n            mapData.push(countryMapData);\n        });\n\n        var option = {\n            title: {\n                text: 'Total confirmed cases / 1 mil population',\n                left: 'center'\n            },\n            tooltip: {\n                trigger: 'item'\n            },\n            visualMap: {\n                left: 'left',\n                min: 50,\n                max: 10000,\n                inRange: {\n                    color: ['#f5f5f5', '#a50026']\n                },\n                text: ['50', '1 000'],\n                calculable: true\n            },\n            series: [\n                {\n                    name: 'Confirmed cases',\n                    type: 'map',\n                    mapType: 'world',\n                    roam: true,\n                    emphasis: { itemStyle: { areaColor: 'yellow' } },\n                    label: {\n                        normal: {\n                            show: false\n                        },\n                        emphasis: {\n                            show: false\n                        }\n                    },\n                    data: mapData\n                }\n            ]\n        };\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>COVID-19</h1></Col>\n                    <Col className=\"text-right\"><a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\" rel=\"noopener noreferrer\">data source</a></Col>\n                </Row>\n                <hr />\n                <Container fluid id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\" }}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.confirmed.total)}<br />&nbsp;<br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR} />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\" }}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.active.total)}<br /><small className=\"text-muted\">{activeRate}% out of total</small><br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\" }}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.recovered.total)}<br /><small className=\"text-muted\">{recoveredRateTotal}% out of total</small><br /><small className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\" }}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.deaths.total)}<br /><small className=\"text-muted\">{deathRateTotal}% out of total</small><br /><small className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container fluid id=\"charts\">\n                    <Card>\n                        <Card.Body>\n                            <ReactEcharts\n                                option={option || {}}\n                                style={{ height: '550px', width: '100%' }}\n                                className='react_for_echarts' />\n                            <ResponsiveContainer height={250}>\n                                <ComposedChart data={world.timeline} style={{ margin: \"0 auto\" }} fontSize={10}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                    <Line name=\"total active\" dot={false} dataKey=\"activeTotal\" stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\" />\n                                </ComposedChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                </Container>\n                <Container fluid id=\"countries\">\n                    <table className=\"table table-condensed table-hover table-bordered\">\n                        <thead>\n                            <tr>\n                                <th><input className=\"search\" placeholder=\"Filter\" /></th>\n                                <th colSpan=\"4\">Confirmed</th>\n                                <th colSpan=\"4\">Deaths</th>\n                                <th colSpan=\"2\">Recovered</th>\n                                <th className=\"text-right sort\" data-sort=\"population\">Population <FontAwesomeIcon icon={faSort} /></th>\n                            </tr>\n                            <tr>\n                                <td className=\"sort\" data-sort=\"name\">Country <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedTotal1Mil\">Total/1M <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"confirmedNew1Mil\">New/1M <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsTotal1Mil\">Total/1M <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"deathsNew1Mil\">New/1M <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"recoveredTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"recoveredNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                                <td className=\"text-right sort\" data-sort=\"population\"></td>\n                            </tr>\n                        </thead>\n                        <tbody className=\"list\">\n                            {\n                                data.map((country, index) =>\n                                    <tr key={index}>\n                                        <td className=\"text-left name\"><a href={\"#/\" + country.name} target=\"_blank\" rel=\"noopener noreferrer\">{country.name}</a></td>\n                                        <td className=\"text-right confirmedTotal\">{country.summary.confirmed.total}</td>\n                                        <td className=\"text-right confirmedTotal1Mil\">{country.summary.confirmed.total1Mil}</td>\n                                        <td className=\"text-right confirmedNew\">{country.summary.confirmed.new}</td>\n                                        <td className=\"text-right confirmedNew1Mil\">{country.summary.confirmed.new1Mil}</td>\n                                        <td className=\"text-right deathsTotal\">{country.summary.deaths.total}</td>\n                                        <td className=\"text-right deathsTotal1Mil\">{country.summary.deaths.total1Mil}</td>\n                                        <td className=\"text-right deathsNew\">{country.summary.deaths.new}</td>\n                                        <td className=\"text-right deathsNew1Mil\">{country.summary.deaths.new1Mil}</td>\n                                        <td className=\"text-right recoveredTotal\">{country.summary.recovered.total}</td>\n                                        <td className=\"text-right recoveredNew\">{country.summary.recovered.new}</td>\n                                        <td className=\"text-right population\">{country.population}</td>\n                                    </tr>)\n                            }\n                        </tbody>\n                    </table>\n                    <div>Data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a></div>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container, Card, CardDeck, Row, Col } from 'react-bootstrap'\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Area, Tooltip, Legend, BarChart, Bar, ResponsiveContainer, LineChart, Line, ComposedChart, PieChart, Pie, Cell } from 'recharts';\nimport Utils from './utils';\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const { params } = this.props.match;\n        this.countryName = params.countryName;\n    }\n    render() {\n        var data = DataService.getCountryData(this.countryName);\n\n        var activeRate = (data.summary.active.total / data.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateTotal = (data.summary.recovered.total / data.summary.confirmed.total * 100).toFixed(1);\n        var recoveredRateClosed = (data.summary.recovered.total / data.summary.closed.total * 100).toFixed(1);\n        var deathRateTotal = (data.summary.deaths.total / data.summary.confirmed.total * 100).toFixed(1);\n        var deathRateClosed = (data.summary.deaths.total / data.summary.closed.total * 100).toFixed(1);\n\n        var outcomeData = [\n            { name: \"Recovered\", value: data.summary.recovered.total },\n            { name: \"Deceased\", value: data.summary.deaths.total }\n        ]\n\n        var timelineSliced = data.timeline.slice(-1 * 30);\n\n        const RADIAN = Math.PI / 180;\n        const renderCustomizedLabel = ({\n            cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n        }) => {\n            const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n            const x = cx + radius * Math.cos(-midAngle * RADIAN);\n            const y = cy + radius * Math.sin(-midAngle * RADIAN);\n            console.log(x)\n\n            return (\n                <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                    {`${(percent * 100).toFixed(0)}%`}\n                </text>\n            );\n        };\n\n        // console.log(data)\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>{this.countryName}</h1></Col>\n                    <Col className=\"text-right\"><a href=\"#/\">All countries</a></Col>\n                </Row>\n                <hr />\n                <Container fluid id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\" }}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.confirmed.total)}<br />&nbsp;<br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR} />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\" }}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.active.total)}<br /><small className=\"text-muted\">{activeRate}% out of total</small><br />&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\" }}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.recovered.total)}<br /><small className=\"text-muted\">{recoveredRateTotal}% out of total</small><br /><small className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header style={{ backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\" }}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.deaths.total)}<br /><small className=\"text-muted\">{deathRateTotal}% out of total</small><br /><small className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container fluid id=\"charts\">\n                    <Card>\n                        <Card.Header>Total cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <ComposedChart data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                    <Line name=\"total active\" dot={false} dataKey=\"activeTotal\" stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\" />\n                                </ComposedChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Daily cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <ComposedChart width={730} height={250} data={timelineSliced} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis domain={[0, 'dataMax+10']}/>\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Line name=\"confirmed\" dot={false} dataKey=\"confirmedNew\" stroke={Utils.CONFIRMED_COLOR} strokeWidth=\"2\" />\n                                    <Bar name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                    <Bar name=\"recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stroke=\"none\" fillOpacity={0.5} fill={Utils.RECOVERED_COLOR} />\n                                    <Bar name=\"deceased\" type=\"monotone\" dataKey=\"deathsNew\" stroke=\"none\" fillOpacity={0.5} fill={Utils.DECEASED_COLOR} />\n                                </ComposedChart>\n                            </ResponsiveContainer>\n                            <ResponsiveContainer height={250}>\n                                <BarChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Bar name=\"new confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR} />\n                                </BarChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Active vs closed cases</Card.Header>\n                        <Card.Body>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }} stackOffset=\"expand\">\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <Tooltip />\n                                    <Legend verticalAlign=\"top\" height={36} />\n                                    <Area name=\"total active cases\" type=\"monotone\" dataKey=\"activeTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.ACTIVE_COLOR} />\n                                    <Area name=\"total closed cases\" type=\"monotone\" dataKey=\"closedTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={Utils.CLOSED_COLOR} />\n                                </AreaChart>\n                            </ResponsiveContainer>\n                        </Card.Body>\n                    </Card>\n                    <Card>\n                        <Card.Header>Cases outcome</Card.Header>\n                        <Card.Body>\n                            <CardDeck>\n                                <Card border=\"light\">\n                                    <Card.Body>\n                                        <ResponsiveContainer height={250}>\n                                            <PieChart>\n                                                <Tooltip />\n                                                <Legend verticalAlign=\"top\" height={36} />\n                                                <Pie\n                                                    labelLine={false}\n                                                    label={renderCustomizedLabel}\n                                                    outerRadius={80}\n                                                    data={outcomeData}\n                                                    dataKey=\"value\" >\n                                                    <Cell key={`cell-0`} fill={Utils.RECOVERED_COLOR} />\n                                                    <Cell key={`cell-1`} fill={Utils.DECEASED_COLOR} />\n                                                </Pie>\n                                            </PieChart>\n                                        </ResponsiveContainer>\n                                    </Card.Body>\n                                </Card>\n                                <Card border=\"light\">\n                                    <Card.Body>\n                                        <ResponsiveContainer height={250}>\n                                            <LineChart width={730} height={250} data={data.timeline} style={{ margin: \"0 auto\" }}>\n                                                <XAxis dataKey=\"date\" />\n                                                <YAxis domain={[0, 'dataMax+2']} />\n                                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                                <Tooltip />\n                                                <Legend verticalAlign=\"top\" />\n                                                <Line name=\"% deceased out of closed cases\" dot={false} strokeWidth=\"3\" dataKey=\"deathRateClosedCases\" stroke={Utils.ACTIVE_COLOR} />\n                                                <Line name=\"% deceased out of total cases\" dot={false} strokeWidth=\"3\" dataKey=\"deathRateTotalCases\" stroke={Utils.DECEASED_COLOR} />\n                                            </LineChart>\n                                        </ResponsiveContainer>\n                                    </Card.Body>\n                                </Card>\n                            </CardDeck>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Countries from './countries';\nimport Country from './country';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter basename='/covid-19'>\n          <Switch>\n            <Route exact path={'/'} component={Countries} />\n            <Route path={'/:countryName'} component={Country} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}