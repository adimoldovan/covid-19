{"version":3,"sources":["Charts.js","App.js","serviceWorker.js","index.js"],"names":["Charts","width","height","data","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","type","stroke","fillOpacity","fill","Component","App","props","getCountriesData","countries","confirmedData","map","val","name","country","confirmed","total","recovered","deaths","getCountryData","list","countryName","i","length","forEach","item","recoveredData","deathsData","console","log","state","className","colSpan","this","index","key","new","growth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19023425.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Area, Tooltip } from 'recharts'\n\nclass Charts extends Component {\n    render() {\n        const data = [\n            {\n                \"name\": \"Page A\",\n                \"uv\": 4000,\n                \"pv\": 2400,\n                \"amt\": 2400\n            },\n            {\n                \"name\": \"Page B\",\n                \"uv\": 3000,\n                \"pv\": 1398,\n                \"amt\": 2210\n            },\n            {\n                \"name\": \"Page C\",\n                \"uv\": 2000,\n                \"pv\": 9800,\n                \"amt\": 2290\n            },\n            {\n                \"name\": \"Page D\",\n                \"uv\": 2780,\n                \"pv\": 3908,\n                \"amt\": 2000\n            },\n            {\n                \"name\": \"Page E\",\n                \"uv\": 1890,\n                \"pv\": 4800,\n                \"amt\": 2181\n            },\n            {\n                \"name\": \"Page F\",\n                \"uv\": 2390,\n                \"pv\": 3800,\n                \"amt\": 2500\n            },\n            {\n                \"name\": \"Page G\",\n                \"uv\": 3490,\n                \"pv\": 4300,\n                \"amt\": 2100\n            }\n        ]\n\n        return (\n            <AreaChart width={730} height={250} data={data}\n                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n                    </linearGradient>\n                    <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                    </linearGradient>\n                </defs>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                <Area type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" />\n            </AreaChart>\n        )\n    }\n}\nexport default Charts;","import React, { Component } from 'react';\nimport './App.css';\nimport Charts from './Charts'\nimport confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: this.getCountriesData()\n    };\n  }\n\n  getCountriesData = () => {\n    let countries = confirmedData.map(function (val) {\n      return { name: val.country, confirmed: val.total, recovered: {}, deaths: {} };\n    })\n\n    countries.forEach(populateCountryData)\n\n    function populateCountryData(item) {\n      item.recovered = getCountryData(recoveredData, item.name)\n      item.deaths = getCountryData(deathsData, item.name)\n    }\n\n    function getCountryData(list, countryName) {\n      for (var i = 0; i < list.length; i++) {\n        if (list[i].country === countryName) {\n          return list[i].total;\n        }\n      }\n    }\n\n    console.log(countries)\n    return countries;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Charts country=\"Romania\"/>\n        <div>\n          <table>\n            <thead>\n              <tr>\n                <th>Country</th>\n                <th colSpan=\"3\">Confirmed</th>\n                <th colSpan=\"3\">Deaths</th>\n                <th colSpan=\"3\">Recovered</th>\n              </tr>\n              <tr>\n                <td></td>\n                <td>Total</td>\n                <td>New cases</td>\n                <td>Growth</td>\n                <td>Total</td>\n                <td>New cases</td>\n                <td>Growth</td>\n                <td>Total</td>\n                <td>New cases</td>\n                <td>Growth</td>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                this.state.countries.map((country, index) =>\n                  <tr key={index}>\n                    <td>{country.name}</td>\n                    <td>{country.confirmed.total}</td>\n                    <td>{country.confirmed.new}</td>\n                    <td>{country.confirmed.growth}</td>\n                    <td>{country.deaths.total}</td>\n                    <td>{country.deaths.new}</td>\n                    <td>{country.deaths.growth}</td>\n                    <td>{country.recovered.total}</td>\n                    <td>{country.recovered.new}</td>\n                    <td>{country.recovered.growth}</td>\n                  </tr>)\n              }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}