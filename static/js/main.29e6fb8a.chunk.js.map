{"version":3,"sources":["data-service.js","utils.js","countries.jsx","romania.jsx","country.jsx","App.js","serviceWorker.js","index.js"],"names":["DataService","confirmedData","map","obj","getCountryData","country","countryName","countryConfirmed","find","c","countryRecovered","recoveredData","countryDeaths","deathsData","countryData","name","population","summary","confirmed","new","total","new1Mil","this","noNaN","parseInt","total1Mil","recovered","deaths","closed","active","timeline","Object","keys","key","date","confirmedNew","confirmedTotal","deathsNew","deathsTotal","recoveredNew","recoveredTotal","closedNew","closedTotal","activeNew","activeTotal","deathRateClosedCases","Number","toFixed","deathRateTotalCases","countries","data","d","forEach","confirmedTimeline","n","isNaN","Utils","String","replace","color","i","Math","floor","random","colors","length","CONFIRMED_COLOR","RECOVERED_COLOR","DECEASED_COLOR","ACTIVE_COLOR","CLOSED_COLOR","POSITIVITY_COLOR","Countries","getVerboseData","world","pop","activeRate","recoveredRateTotal","recoveredRateClosed","deathRateTotal","deathRateClosed","mapData","nameTranslator","nameMatch","countryMapData","value","push","option","title","text","left","toolbox","show","orient","top","feature","dataZoom","zoom","back","tooltip","trigger","visualMap","min","max","inRange","calculable","series","type","mapType","roam","emphasis","itemStyle","areaColor","label","normal","sortCaret","order","className","ToggleList","ColumnToggle","columns","dataField","sort","filter","textFilter","placeholder","style","backgroundColor","border","margin","fontStyle","align","formatter","href","target","rel","formattedNumber","defaultSorted","Container","fluid","Row","Col","id","CardDeck","Card","Header","Body","Title","height","dataKey","stroke","fill","width","fontSize","strokeDasharray","verticalAlign","fillOpacity","dot","strokeWidth","domain","keyField","columnToggle","props","contextual","columnToggleProps","baseProps","filterFactory","hover","bordered","Component","Romania","rawData","covid_romania","day","total_cases","total_recovered","total_deaths","total_active","percent_active","percent_deceased_closed","percent_deceased_total","percent_recovered_closed","percent_recovered_total","percent_positive_tests_today","new_cases_today","new_tests_today","county_data","cty","cases_1_k_pop","county_population","a","b","lastDay","timelineData","reverse","counties","ctyObj","county_id","county_name","county","ctyDay","reporting_date","sm","orientation","new_deaths_today","intensive_care_right_now","new_recovered_today","index","Country","params","match","item","stackOffset","stackId","legendType","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29e6fb8a.chunk.js","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n    static getVerboseData() {\n        return confirmedData.map(function (obj) {\n            return DataService.getCountryData(obj.country);\n        });\n    }\n\n    static getCountryData(countryName) {\n        const countryConfirmed = confirmedData.find(c => c.country === countryName);\n        const countryRecovered = recoveredData.find(c => c.country === countryName);\n        const countryDeaths = deathsData.find(c => c.country === countryName);\n\n        const countryData = {\n            name: countryName,\n            population: countryConfirmed.population,\n            summary: {\n                confirmed: {\n                    new: countryConfirmed.total.new,\n                    new1Mil: this.noNaN(parseInt((countryConfirmed.total.new / parseInt(countryConfirmed.population)) * 1000000)),\n                    total: countryConfirmed.total.total,\n                    total1Mil: this.noNaN(parseInt((countryConfirmed.total.total / parseInt(countryConfirmed.population)) * 1000000)),\n                },\n                recovered: {\n                    new: countryRecovered.total.new,\n                    total: countryRecovered.total.total,\n                },\n                deaths: {\n                    new: countryDeaths.total.new,\n                    new1Mil: this.noNaN(parseInt((countryDeaths.total.new / parseInt(countryDeaths.population)) * 1000000)),\n                    total: countryDeaths.total.total,\n                    total1Mil: this.noNaN(parseInt((countryDeaths.total.total / parseInt(countryDeaths.population)) * 1000000)),\n                },\n                closed: {\n                    new: countryDeaths.total.new + countryRecovered.total.new,\n                    total: countryDeaths.total.total + countryRecovered.total.total\n                },\n                active: {\n                    new: countryConfirmed.total.new - (countryDeaths.total.new + countryRecovered.total.new),\n                    total: countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total),\n                    total1Mil: this.noNaN(parseInt(((countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total)) / parseInt(countryConfirmed.population)) * 1000000))\n                }\n            },\n            timeline: {}\n        };\n\n        countryData.timeline = Object.keys(countryConfirmed.timeline).map(function (key) {\n            return {\n                date: key,\n                confirmedNew: countryConfirmed.timeline[key].new,\n                confirmedTotal: countryConfirmed.timeline[key].total,\n                deathsNew: countryDeaths.timeline[key].new,\n                deathsTotal: countryDeaths.timeline[key].total,\n                recoveredNew: countryRecovered.timeline[key].new,\n                recoveredTotal: countryRecovered.timeline[key].total,\n                closedNew: countryDeaths.timeline[key].new + countryRecovered.timeline[key].new,\n                closedTotal: countryDeaths.timeline[key].total + countryRecovered.timeline[key].total,\n                activeNew: countryConfirmed.timeline[key].new - (countryDeaths.timeline[key].new + countryRecovered.timeline[key].new),\n                activeTotal: countryConfirmed.timeline[key].total - (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total),\n                deathRateClosedCases: Number(((countryDeaths.timeline[key].total / (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total)) * 100).toFixed(1)),\n                deathRateTotalCases: Number(((countryDeaths.timeline[key].total / countryConfirmed.timeline[key].total) * 100).toFixed(1))\n            };\n        });\n\n        // console.log(countryData)\n        return countryData;\n    }\n\n    static getConfirmedTimelines(countries) {\n        // get all dates\n        const dates = Object.keys(confirmedData[0].timeline).map(function (d) {\n            return d\n        });\n\n        const data = dates.map(function (d) {\n            return {\n                date: d\n            }\n        });\n\n\n        countries.forEach(function (countryName) {\n            const confirmedTimeline = confirmedData.find(c => c.country === countryName);\n            data.forEach(function (obj) {\n                obj[countryName] = confirmedTimeline.timeline[obj.date].total;\n            });\n        });\n\n        // console.log(data);\n        return data;\n    }\n\n    static noNaN(n) {\n        return isNaN(n) ? 0 : n;\n    }\n}","export default class Utils {\n    static formattedNumber(n) {\n        return String(n).replace(/(.)(?=(\\d{3})+$)/g, '$1 ')\n    }\n\n    static getRandomHexaColorCode() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    static getRandomColor() {\n        var colors = ['red', 'blue', 'green', 'black', 'orange'];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n}\n\nUtils.CONFIRMED_COLOR = \"#ffc658\";\nUtils.RECOVERED_COLOR = \"#82ca9d\";\nUtils.DECEASED_COLOR = \"#1c1c1c\";\nUtils.ACTIVE_COLOR = \"#fca085\";\nUtils.CLOSED_COLOR = \"#8884d8\";\nUtils.POSITIVITY_COLOR = \"#C889A3\";\n\n","import React, {Component} from 'react';\nimport DataService from './data-service';\nimport {Card, CardDeck, Col, Container, Row} from 'react-bootstrap';\nimport Utils from './utils';\nimport {\n    Area,\n    AreaChart,\n    Bar,\n    BarChart,\n    CartesianGrid,\n    ComposedChart,\n    Legend,\n    Line,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport ReactEcharts from 'echarts-for-react';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport 'echarts/map/js/world.js';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.js';\nimport filterFactory, {textFilter} from 'react-bootstrap-table2-filter';\nimport ToolkitProvider, {ColumnToggle} from 'react-bootstrap-table2-toolkit';\n\nexport default class Countries extends Component {\n    componentDidMount() {\n\n    }\n\n    render() {\n        let data = DataService.getVerboseData()\n        let world = data.find(c => c.name === 'World');\n        data.pop(world);\n\n        let activeRate = (world.summary.active.total / world.summary.confirmed.total * 100).toFixed(1);\n        let recoveredRateTotal = (world.summary.recovered.total / world.summary.confirmed.total * 100).toFixed(1);\n        let recoveredRateClosed = (world.summary.recovered.total / world.summary.closed.total * 100).toFixed(1);\n        let deathRateTotal = (world.summary.deaths.total / world.summary.confirmed.total * 100).toFixed(1);\n        let deathRateClosed = (world.summary.deaths.total / world.summary.closed.total * 100).toFixed(1);\n\n        let mapData = [];\n\n        let nameTranslator = {\n            'US': 'United States',\n            'South Sudan': 'S. Sudan',\n            'Western Sahara': 'W. Sahara',\n            'Cote d\\'Ivoire': 'Cote d\\'Ivoire',\n            'Central African Republic': 'Central African Rep.',\n            'Congo (Kinshasa)': 'Dem. Rep. Congo',\n            'Congo (Brazzaville)': 'Congo',\n            'Czechia': 'Czech Rep.',\n            'Bosnia and Herzegovina': 'Bosnia and Herz.',\n            'North Macedonia': 'Macedonia',\n            'Korea, South': 'Korea',\n            'Dominican Republic': 'Dominican Rep.',\n            'Laos': 'Lao PDR',\n            'Burma': 'Myanmar'\n        }\n\n        data.forEach(function (country) {\n            let nameMatch = nameTranslator[country.name]\n            let translatedName = (nameMatch) ? nameMatch : country.name\n            let countryMapData = {\n                name: translatedName,\n                value: country.summary.confirmed.total1Mil\n            };\n            mapData.push(countryMapData);\n        });\n\n        let option = {\n            title: {\n                text: 'Total confirmed cases / 1 mil population',\n                left: 'center'\n            },\n            toolbox: {\n                show: true,\n                orient: 'vertical',\n                left: 'right',\n                top: 'center',\n                feature: {\n                    dataZoom: {\n                        show: false,\n                        title: {\n                            zoom: 'Area zooming',\n                            back: 'Restore area zooming'\n                        }\n                    }\n                }\n            },\n            tooltip: {\n                trigger: 'item'\n            },\n            visualMap: {\n                left: 'left',\n                min: 50,\n                max: 10000,\n                inRange: {\n                    color: ['#f5f5f5', '#a50026']\n                },\n                text: ['50', '1 000'],\n                calculable: true\n            },\n            series: [\n                {\n                    name: 'Confirmed cases / 1 mil. pop.',\n                    type: 'map',\n                    mapType: 'world',\n                    roam: 'move',\n                    zoom: 1.1,\n                    emphasis: {itemStyle: {areaColor: 'yellow'}},\n                    label: {\n                        normal: {\n                            show: false\n                        },\n                        emphasis: {\n                            show: false\n                        }\n                    },\n                    data: mapData\n                }\n            ]\n        };\n\n        function countryLink(countryName) {\n            return <a href={\"#/\" + countryName} target=\"_blank\" rel=\"noopener noreferrer\">{countryName}</a>;\n        }\n\n        function sortCaret(order) {\n            if (!order) return (<span className=\"order\">&nbsp;</span>);\n            else if (order === 'asc') return (<span className=\"caret-asc\">&nbsp;</span>);\n            else if (order === 'desc') return (<span className=\"caret-desc\">&nbsp;</span>);\n            return null;\n        }\n\n        const {ToggleList} = ColumnToggle;\n\n        const columns = [{\n            dataField: 'name',\n            text: 'Country',\n            sort: true,\n            filter: textFilter({\n                placeholder: 'filter',\n                style: {\n                    backgroundColor: '#f5f5f5',\n                    border: 0,\n                    margin: 5,\n                    color: '#d3d3d3',\n                    fontStyle: 'italic'\n                }\n            }),\n            align: 'left',\n            formatter: countryLink,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.total',\n            text: 'Total cases',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.total1Mil',\n            text: 'Total cases/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.new',\n            text: 'New cases',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.new1Mil',\n            text: 'New cases/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.active.total',\n            text: 'Active cases',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.active.total1Mil',\n            text: 'Active cases/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.total',\n            text: 'Total deceased',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.total1Mil',\n            text: 'Deceased/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.new',\n            text: 'Deceased new',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.new1Mil',\n            text: 'Deceased new/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.recovered.total',\n            text: 'Recovered',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.recovered.new',\n            text: 'Recovered new',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'population',\n            text: 'Population',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }];\n\n        const defaultSorted = [{\n            dataField: 'summary.confirmed.total',\n            order: 'desc'\n        }];\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>COVID-19</h1></Col>\n                    <Col className=\"text-right\"><a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\"\n                                                   rel=\"noopener noreferrer\">data source</a></Col>\n                </Row>\n                <hr/>\n                <Container fluid id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\"}}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.confirmed.total)}<br/>&nbsp;<br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\"}}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.active.total)}<br/><small\n                                    className=\"text-muted\">{activeRate}% out of total</small><br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\"}}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.recovered.total)}<br/><small\n                                    className=\"text-muted\">{recoveredRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\"}}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(world.summary.deaths.total)}<br/><small\n                                    className=\"text-muted\">{deathRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={30}>\n                                    <AreaChart data={world.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container fluid id=\"charts\">\n                    <Card>\n                        <Card.Body>\n                            <ReactEcharts\n                                option={option || {}}\n                                style={{height: '550px', width: '100%'}}\n                                className='react_for_echarts'/>\n                            <CardDeck>\n                                <Card border=\"light\">\n                                    <Card.Body>\n                                        <ResponsiveContainer height={250}>\n                                            <ComposedChart data={world.timeline} style={{margin: \"0 auto\"}}\n                                                           fontSize={10}>\n                                                <XAxis dataKey=\"date\"/>\n                                                <YAxis/>\n                                                <CartesianGrid strokeDasharray=\"3 3\"/>\n                                                <Tooltip/>\n                                                <Legend verticalAlign=\"bottom\" height={36}/>\n                                                <Area name=\"total confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\"\n                                                      stroke=\"none\"\n                                                      fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                                <Line name=\"total active\" dot={false} dataKey=\"activeTotal\"\n                                                      stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\"/>\n                                            </ComposedChart>\n                                        </ResponsiveContainer>\n                                    </Card.Body>\n                                </Card>\n                                <Card border=\"light\">\n                                    <Card.Body>\n                                        <ResponsiveContainer height={250}>\n                                            <BarChart width={730} height={250} data={world.timeline}\n                                                      style={{margin: \"0 auto\"}}>\n                                                <XAxis dataKey=\"date\"/>\n                                                <YAxis domain={[0, 'dataMax+1']}/>\n                                                <CartesianGrid strokeDasharray=\"3 3\"/>\n                                                <Tooltip/>\n                                                <Legend verticalAlign=\"bottom\" height={36}/>\n                                                <Bar name=\"daily confirmed\" type=\"monotone\" dataKey=\"confirmedNew\"\n                                                     stroke=\"none\"\n                                                     fill={Utils.CONFIRMED_COLOR}/>\n                                            </BarChart>\n                                        </ResponsiveContainer>\n                                    </Card.Body>\n                                </Card>\n                            </CardDeck>\n                        </Card.Body>\n                    </Card>\n                </Container>\n                <Container fluid id=\"countries\">\n                    <ToolkitProvider\n                        keyField='name'\n                        data={data}\n                        columns={columns}\n                        columnToggle>\n                        {\n                            props => (\n                                <div>\n                                    <ToggleList\n                                        contextual=\"light\"\n                                        {...props.columnToggleProps} />\n                                    <hr/>\n                                    <BootstrapTable\n                                        {...props.baseProps}\n                                        filter={filterFactory()}\n                                        hover\n                                        bordered={false}\n                                        defaultSorted={defaultSorted}\n                                    />\n                                </div>\n                            )\n                        }\n                    </ToolkitProvider>\n                    <div>Data source: <a\n                        href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a>\n                    </div>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Utils from \"./utils\";\nimport rawData from './data/romania_graphs_ro.json'\nimport {\n    Area,\n    AreaChart,\n    Bar,\n    BarChart,\n    ComposedChart,\n    Line,\n    LineChart,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from \"recharts\";\n\nexport default class Romania extends Component {\n    render() {\n        // calculate active cases\n        rawData.covid_romania.forEach(function (day) {\n            let active = day.total_cases - day.total_recovered - day.total_deaths\n            let closed = day.total_recovered + day.total_deaths\n            day.total_active = active;\n            day.percent_active = (active / day.total_cases * 100).toFixed(1);\n            day.percent_deceased_closed = (day.total_deaths / closed * 100).toFixed(1);\n            day.percent_deceased_total = (day.total_deaths / day.total_cases * 100).toFixed(1);\n            day.percent_recovered_closed = (day.total_recovered / closed * 100).toFixed(1);\n            day.percent_recovered_total = (day.total_recovered / day.total_cases * 100).toFixed(1);\n            day.percent_positive_tests_today = (parseInt(day.new_cases_today) / parseInt(day.new_tests_today) * 100).toFixed(1);\n\n            if (day.county_data) {\n                day.county_data.forEach(function (cty) {\n                    cty.cases_1_k_pop = (cty.total_cases / cty.county_population * 1000).toFixed(1);\n                });\n\n                day.county_data.sort((a, b) => (a.cases_1_k_pop < b.cases_1_k_pop) ? 1 : -1)\n            }\n        });\n\n        let lastDay = rawData.covid_romania[0]\n        let timelineData = rawData.covid_romania.reverse();\n        let counties = [];\n\n        // create initial county objects\n        lastDay.county_data.forEach(function (cty) {\n            let ctyObj = {\n                county_id: cty.county_id,\n                county_name: cty.county_name,\n                county_population: cty.county_population,\n                timeline: []\n            }\n\n            counties.push(ctyObj)\n        });\n\n        // fill counties objects with timeline data\n        counties.forEach(function (county) {\n                timelineData.forEach(function (day) {\n                    if (day.county_data) {\n                        let ctyDay = day.county_data.find(c => c.county_name === county.county_name);\n                        county.timeline.push(\n                            {\n                                reporting_date: day.reporting_date,\n                                total_cases: ctyDay.total_cases,\n                                cases_1_k_pop: ctyDay.cases_1_k_pop\n                            }\n                        )\n                    }\n                });\n            }\n        );\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>Romania</h1></Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col className=\"text-right\">Last update: {lastDay.reporting_date}</Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={6}>\n                        <ResponsiveContainer height={250}>\n                            <ComposedChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Area name=\"confirmed\" type=\"monotone\" dataKey=\"total_cases\"\n                                      stroke=\"none\"\n                                      fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                <Area name=\"active\" dot={false} dataKey=\"total_active\"\n                                      stroke=\"none\"\n                                      fillOpacity={0.5} fill={Utils.ACTIVE_COLOR}/>\n                            </ComposedChart>\n                        </ResponsiveContainer>\n                    </Col>\n                    <Col sm={6}>\n                        <ResponsiveContainer height={250}>\n                            <LineChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Line name=\"new cases\" type=\"monotone\" dataKey=\"new_cases_today\"\n                                      dot={false}\n                                      strokeWidth={2}\n                                      stroke={Utils.CONFIRMED_COLOR}/>\n                                <Line name=\"new recovered\" type=\"monotone\" dataKey=\"new_recovered_today\"\n                                      dot={false}\n                                      strokeWidth={2}\n                                      stroke={Utils.RECOVERED_COLOR}/>\n                                <Line name=\"new deceased\" type=\"monotone\" dataKey=\"new_deaths_today\"\n                                      dot={false}\n                                      strokeWidth={2}\n                                      stroke={Utils.DECEASED_COLOR}/>\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-between header\">\n                    <Col sm={3}>\n                        <div className=\"summary-box\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_cases)}</span>\n                            <br/>\n                            <span className=\"description\">confirmed cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_active)}</span>\n                            <br/>\n                            <span className=\"description\">active cases</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(lastDay.percent_active)} %</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box \">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_deaths)}</span>\n                            <br/>\n                            <span className=\"description\">deceased</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(lastDay.percent_deceased_closed)} % out of closed, {Utils.formattedNumber(lastDay.percent_deceased_total)} % out of total</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box \">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_recovered)}</span>\n                            <br/>\n                            <span className=\"description\">recovered</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(lastDay.percent_recovered_closed)} % out of closed, {Utils.formattedNumber(lastDay.percent_recovered_total)} % out of total</span>\n                        </div>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.new_cases_today)}</span>\n                            <br/>\n                            <span className=\"description\">confirmed new</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Bar name=\"daily new cases\" type=\"monotone\" dataKey=\"new_cases_today\"\n                                     stroke=\"none\"\n                                     fill={Utils.CONFIRMED_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.new_deaths_today)}</span>\n                            <br/>\n                            <span className=\"description\">deceased new</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Bar name=\"daily new deaths\" type=\"monotone\" dataKey=\"new_deaths_today\"\n                                     stroke=\"none\"\n                                     fillOpacity={0.6}\n                                     fill={Utils.DECEASED_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.intensive_care_right_now)}</span>\n                            <br/>\n                            <span className=\"description\">serious cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Bar name=\"ICU cases\" type=\"monotone\" dataKey=\"intensive_care_right_now\"\n                                     stroke=\"none\"\n                                     fillOpacity={1}\n                                     fill={Utils.ACTIVE_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span\n                                className=\"number\">{Utils.formattedNumber(lastDay.percent_positive_tests_today)}%</span>\n                            <br/>\n                            <span className=\"description\">new positive cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Bar name=\"percent of positive tests\" type=\"monotone\"\n                                     dataKey=\"percent_positive_tests_today\"\n                                     stroke=\"none\"\n                                     fillOpacity={1}\n                                     fill={Utils.POSITIVITY_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span\n                                className=\"number\">{Utils.formattedNumber(lastDay.new_recovered_today)}</span>\n                            <br/>\n                            <span className=\"description\">new recoveries</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Bar name=\"daily recoveries\" type=\"monotone\"\n                                     dataKey=\"new_recovered_today\"\n                                     stroke=\"none\"\n                                     fillOpacity={1}\n                                     fill={Utils.RECOVERED_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row className=\"spaced-row\">\n                    {lastDay.county_data.map((county, index) => (\n                        <Col sm={6} key={index}>\n                            <div className=\"summary-box county-box\">\n                                <span className=\"description county-name \">{county.county_name}</span>\n                                <br/>\n                                <span className=\"number\">{county.total_cases} ({county.cases_1_k_pop} &#8240;)</span>\n                                <br/>\n                                <span className=\"description\">total cases</span>\n                            </div>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart data={counties.find(c => c.county_name === county.county_name).timeline}\n                                           style={{margin: \"0 auto\"}}>\n                                    <XAxis dataKey=\"reporting_date\"/>\n                                    <YAxis orientation=\"right\"/>\n                                    <Tooltip/>\n                                    <Area name=\"confirmed\" type=\"monotone\"\n                                          dataKey=\"total_cases\"\n                                          stroke=\"none\"\n                                          fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                </AreaChart>\n                            </ResponsiveContainer>\n                        </Col>\n                    ))}\n                </Row>\n                <hr/>\n                <Row className=\"spaced-row\">\n                    <Col className=\"text-left\">\n                        <a href=\"#/\">All countries</a>\n                    </Col>\n                    <Col className=\"text-right\"><p>Data sources:</p>\n                        <a href=\"https://www.graphs.ro\">graphs.ro</a><br/>\n                        <a href=\"https://stirioficiale.ro\">stirioficiale.ro</a>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport DataService from './data-service';\nimport {Card, CardDeck, Col, Container, Row} from 'react-bootstrap'\nimport {\n    Area,\n    AreaChart,\n    Bar,\n    BarChart,\n    CartesianGrid,\n    ComposedChart,\n    Legend,\n    Line,\n    LineChart,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport Utils from './utils';\nimport Romania from \"./romania\";\n\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const {params} = this.props.match;\n        this.countryName = params.countryName;\n    }\n\n    render() {\n        if (this.countryName === \"Romania\") {\n            return (<Romania/>)\n        }\n\n        const data = DataService.getCountryData(this.countryName);\n\n        const activeRate = (data.summary.active.total / data.summary.confirmed.total * 100).toFixed(1);\n        const recoveredRateTotal = (data.summary.recovered.total / data.summary.confirmed.total * 100).toFixed(1);\n        const recoveredRateClosed = (data.summary.recovered.total / data.summary.closed.total * 100).toFixed(1);\n        const deathRateTotal = (data.summary.deaths.total / data.summary.confirmed.total * 100).toFixed(1);\n        const deathRateClosed = (data.summary.deaths.total / data.summary.closed.total * 100).toFixed(1);\n\n        // const timelineSliced = data.timeline.slice(-1 * 30);\n        data.timeline = data.timeline.filter(item => item.confirmedTotal !== 0);\n\n        // console.log(data)\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>{this.countryName}</h1></Col>\n                    <Col className=\"text-right\"><a href=\"#/\">All countries</a></Col>\n                </Row>\n                <hr/>\n                <Container fluid id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\"}}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.confirmed.total)}<br/>&nbsp;<br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\"}}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.active.total)}<br/><small\n                                    className=\"text-muted\">{activeRate}% out of total</small><br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\"}}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.recovered.total)}<br/><small\n                                    className=\"text-muted\">{recoveredRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\"}}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.deaths.total)}<br/><small\n                                    className=\"text-muted\">{deathRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container fluid id=\"charts\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header>Total cases</Card.Header>\n                            <Card.Body>\n                                <ResponsiveContainer height={250}>\n                                    <ComposedChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Area name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\"\n                                              stroke=\"none\"\n                                              fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                        <Line name=\"active\" dot={false} dataKey=\"activeTotal\"\n                                              stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\"/>\n                                    </ComposedChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <AreaChart width={730} height={250} data={data.timeline} style={{margin: \"0 auto\"}}\n                                               stackOffset=\"expand\">\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Area name=\"active\" type=\"monotone\" dataKey=\"activeTotal\"\n                                              stackId=\"1\"\n                                              stroke=\"none\" fillOpacity={0.5} fill={Utils.ACTIVE_COLOR}/>\n                                        <Area name=\"closed\" type=\"monotone\" dataKey=\"closedTotal\"\n                                              stackId=\"1\"\n                                              stroke=\"none\" fillOpacity={0.5} fill={Utils.CLOSED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <LineChart width={730} height={250} data={data.timeline}\n                                               style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+2']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\"/>\n                                        <Line name=\"% deceased out of closed cases\" dot={false}\n                                              strokeWidth=\"3\"\n                                              dataKey=\"deathRateClosedCases\" stroke={Utils.ACTIVE_COLOR}/>\n                                        <Line name=\"% deceased out of total cases\" dot={false}\n                                              strokeWidth=\"3\"\n                                              dataKey=\"deathRateTotalCases\" stroke={Utils.DECEASED_COLOR}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Daily cases</Card.Header>\n                            <Card.Body>\n                                <ResponsiveContainer height={250}>\n                                    <ComposedChart width={730} height={250} data={data.timeline}\n                                                   style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+1']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\"/>\n                                        <Line name=\"confirmed\" dot={false} dataKey=\"confirmedNew\"\n                                              stroke={Utils.CONFIRMED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Line name=\"recovered\" dot={false} dataKey=\"recoveredNew\"\n                                              stroke={Utils.RECOVERED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Line name=\"deceased\" dot={false} dataKey=\"deathsNew\"\n                                              stroke={Utils.DECEASED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Bar name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                        <Bar name=\"recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.RECOVERED_COLOR}/>\n                                        <Bar name=\"deceased\" type=\"monotone\" dataKey=\"deathsNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.DECEASED_COLOR}/>\n                                    </ComposedChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <BarChart width={730} height={250} data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+1']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Bar name=\"newly confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\"\n                                             stroke=\"none\"\n                                             fill={Utils.CONFIRMED_COLOR}/>\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Countries from './countries';\nimport Country from './country';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <HashRouter basename='/covid-19'>\n                    <Switch>\n                        <Route exact path={'/'} component={Countries}/>\n                        <Route exact path={'/:countryName'} component={Country}/>\n                    </Switch>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}