{"version":3,"sources":["data-service.js","utils.js","countries.jsx","romania.jsx","country.jsx","App.js","serviceWorker.js","index.js"],"names":["DataService","confirmedData","map","obj","getCountryData","country","countryName","countryConfirmed","find","c","countryRecovered","recoveredData","countryDeaths","deathsData","countryData","name","population","summary","confirmed","new","total","new1Mil","this","noNaN","parseInt","total1Mil","recovered","deaths","closed","active","timeline","Object","keys","key","date","confirmedNew","confirmedTotal","deathsNew","deathsTotal","recoveredNew","recoveredTotal","closedNew","closedTotal","activeNew","activeTotal","deathRateClosedCases","Number","toFixed","deathRateTotalCases","countries","data","d","forEach","confirmedTimeline","n","isNaN","Utils","String","replace","color","i","Math","floor","random","colors","length","dataSet","filter","x","findOutliers","includes","values","slice","sort","a","b","q1","q3","ceil","maxValue","iqr","minValue","CONFIRMED_COLOR","RECOVERED_COLOR","DECEASED_COLOR","ACTIVE_COLOR","CLOSED_COLOR","POSITIVITY_COLOR","BRUSH_COLOR","TESTS_COLOR","Countries","getVerboseData","world","pop","activeRate","recoveredRateTotal","recoveredRateClosed","deathRateTotal","deathRateClosed","countryNameDict","confirmedMapData","nameMatch","countryMapData","value","push","activeMapData","getMapOptions","title","text","right","bottom","textStyle","fontWeight","tooltip","trigger","visualMap","left","min","max","inRange","calculable","series","type","mapType","roam","zoom","emphasis","itemStyle","areaColor","label","normal","show","confirmedMapOptions","activeMapOptions","sortCaret","order","className","ToggleList","ColumnToggle","columns","dataField","textFilter","placeholder","style","backgroundColor","border","margin","fontStyle","align","formatter","href","target","rel","formattedNumber","defaultSorted","Container","fluid","Row","Col","sm","option","height","width","dataKey","domain","strokeDasharray","verticalAlign","stroke","fill","id","keyField","columnToggle","props","contextual","columnToggleProps","baseProps","filterFactory","hover","bordered","Component","Romania","rawData","covid_romania","day","total_cases","total_recovered","total_deaths","total_active","percent_active","percent_deceased_closed","percent_deceased_total","percent_recovered_closed","percent_recovered_total","percent_positive_tests_today","new_cases_today","new_tests_today","county_data","cty","cases_1_k_pop","county_population","lastDay","timelineData","reverse","counties","ctyObj","county_id","county_name","county","ctyDay","reporting_date","day_before","orientation","travellerWidth","fillOpacity","dot","strokeWidth","new_deaths_today","intensive_care_right_now","yAxisId","stackId","new_recovered_today","index","Country","params","match","item","CardDeck","Card","Header","Body","Title","stackOffset","legendType","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.787832dd.chunk.js","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n    static getVerboseData() {\n        return confirmedData.map(function (obj) {\n            return DataService.getCountryData(obj.country);\n        });\n    }\n\n    static getCountryData(countryName) {\n        const countryConfirmed = confirmedData.find(c => c.country === countryName);\n        const countryRecovered = recoveredData.find(c => c.country === countryName);\n        const countryDeaths = deathsData.find(c => c.country === countryName);\n\n        const countryData = {\n            name: countryName,\n            population: countryConfirmed.population,\n            summary: {\n                confirmed: {\n                    new: countryConfirmed.total.new,\n                    new1Mil: this.noNaN(parseInt((countryConfirmed.total.new / parseInt(countryConfirmed.population)) * 1000000)),\n                    total: countryConfirmed.total.total,\n                    total1Mil: this.noNaN(parseInt((countryConfirmed.total.total / parseInt(countryConfirmed.population)) * 1000000)),\n                },\n                recovered: {\n                    new: countryRecovered.total.new,\n                    total: countryRecovered.total.total,\n                },\n                deaths: {\n                    new: countryDeaths.total.new,\n                    new1Mil: this.noNaN(parseInt((countryDeaths.total.new / parseInt(countryDeaths.population)) * 1000000)),\n                    total: countryDeaths.total.total,\n                    total1Mil: this.noNaN(parseInt((countryDeaths.total.total / parseInt(countryDeaths.population)) * 1000000)),\n                },\n                closed: {\n                    new: countryDeaths.total.new + countryRecovered.total.new,\n                    total: countryDeaths.total.total + countryRecovered.total.total\n                },\n                active: {\n                    new: countryConfirmed.total.new - (countryDeaths.total.new + countryRecovered.total.new),\n                    total: countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total),\n                    total1Mil: this.noNaN(parseInt(((countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total)) / parseInt(countryConfirmed.population)) * 1000000))\n                }\n            },\n            timeline: {}\n        };\n\n        countryData.timeline = Object.keys(countryConfirmed.timeline).map(function (key) {\n            return {\n                date: key,\n                confirmedNew: countryConfirmed.timeline[key].new,\n                confirmedTotal: countryConfirmed.timeline[key].total,\n                deathsNew: countryDeaths.timeline[key].new,\n                deathsTotal: countryDeaths.timeline[key].total,\n                recoveredNew: countryRecovered.timeline[key].new,\n                recoveredTotal: countryRecovered.timeline[key].total,\n                closedNew: countryDeaths.timeline[key].new + countryRecovered.timeline[key].new,\n                closedTotal: countryDeaths.timeline[key].total + countryRecovered.timeline[key].total,\n                activeNew: countryConfirmed.timeline[key].new - (countryDeaths.timeline[key].new + countryRecovered.timeline[key].new),\n                activeTotal: countryConfirmed.timeline[key].total - (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total),\n                deathRateClosedCases: Number(((countryDeaths.timeline[key].total / (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total)) * 100).toFixed(1)),\n                deathRateTotalCases: Number(((countryDeaths.timeline[key].total / countryConfirmed.timeline[key].total) * 100).toFixed(1))\n            };\n        });\n\n        // console.log(countryData)\n        return countryData;\n    }\n\n    static getConfirmedTimelines(countries) {\n        // get all dates\n        const dates = Object.keys(confirmedData[0].timeline).map(function (d) {\n            return d\n        });\n\n        const data = dates.map(function (d) {\n            return {\n                date: d\n            }\n        });\n\n\n        countries.forEach(function (countryName) {\n            const confirmedTimeline = confirmedData.find(c => c.country === countryName);\n            data.forEach(function (obj) {\n                obj[countryName] = confirmedTimeline.timeline[obj.date].total;\n            });\n        });\n\n        // console.log(data);\n        return data;\n    }\n\n    static noNaN(n) {\n        return isNaN(n) ? 0 : n;\n    }\n}","export default class Utils {\n    static formattedNumber(n) {\n        return String(n).replace(/(.)(?=(\\d{3})+$)/g, '$1 ')\n    }\n\n    static getRandomHexaColorCode() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    static getRandomColor() {\n        let colors = ['red', 'blue', 'green', 'black', 'orange'];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    static filterOutliers(dataSet) {\n        return dataSet.filter((x) => !this.findOutliers(dataSet).includes(x));\n    }\n\n    static findOutliers(dataSet) {\n        if (dataSet.length < 4) {\n            return [];\n        }\n\n        let values, q1, q3, iqr, maxValue, minValue;\n\n        values = dataSet.slice().sort((a, b) => a - b);\n\n        if ((values.length / 4) % 1 === 0) {\n            q1 = 1 / 2 * (values[(values.length / 4)] + values[(values.length / 4) + 1]);\n            q3 = 1 / 2 * (values[(values.length * (3 / 4))] + values[(values.length * (3 / 4)) + 1]);\n        } else {\n            q1 = values[Math.floor(values.length / 4 + 1)];\n            q3 = values[Math.ceil(values.length * (3 / 4) + 1)];\n        }\n\n        iqr = q3 - q1;\n        maxValue = q3 + iqr * 1.5;\n        minValue = q1 - iqr * 1.5;\n\n        return values.filter((x) => (x > maxValue) || (x < minValue));\n    }\n}\n\nUtils.CONFIRMED_COLOR = \"#ffc658\";\nUtils.RECOVERED_COLOR = \"#82ca9d\";\nUtils.DECEASED_COLOR = \"#1c1c1c\";\nUtils.ACTIVE_COLOR = \"#fca085\";\nUtils.CLOSED_COLOR = \"#8884d8\";\nUtils.POSITIVITY_COLOR = \"#C889A3\";\nUtils.BRUSH_COLOR = \"#919191\";\nUtils.TESTS_COLOR = \"#719df3\";\n\n","import React, {Component} from 'react';\nimport DataService from './data-service';\nimport {Col, Container, Row} from 'react-bootstrap';\nimport Utils from './utils';\nimport {Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\nimport ReactEcharts from 'echarts-for-react';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport 'echarts/map/js/world.js';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.js';\nimport filterFactory, {textFilter} from 'react-bootstrap-table2-filter';\nimport ToolkitProvider, {ColumnToggle} from 'react-bootstrap-table2-toolkit';\n\nexport default class Countries extends Component {\n    componentDidMount() {\n\n    }\n\n    render() {\n        let data = DataService.getVerboseData()\n        let world = data.find(c => c.name === 'World');\n        data.pop(world);\n\n        let activeRate = (world.summary.active.total / world.summary.confirmed.total * 100).toFixed(1);\n        let recoveredRateTotal = (world.summary.recovered.total / world.summary.confirmed.total * 100).toFixed(1);\n        let recoveredRateClosed = (world.summary.recovered.total / world.summary.closed.total * 100).toFixed(1);\n        let deathRateTotal = (world.summary.deaths.total / world.summary.confirmed.total * 100).toFixed(1);\n        let deathRateClosed = (world.summary.deaths.total / world.summary.closed.total * 100).toFixed(1);\n\n        const countryNameDict = {\n            'US': 'United States',\n            'South Sudan': 'S. Sudan',\n            'Western Sahara': 'W. Sahara',\n            'Cote d\\'Ivoire': 'Cote d\\'Ivoire',\n            'Central African Republic': 'Central African Rep.',\n            'Congo (Kinshasa)': 'Dem. Rep. Congo',\n            'Congo (Brazzaville)': 'Congo',\n            'Czechia': 'Czech Rep.',\n            'Bosnia and Herzegovina': 'Bosnia and Herz.',\n            'North Macedonia': 'Macedonia',\n            'Korea, South': 'Korea',\n            'Dominican Republic': 'Dominican Rep.',\n            'Laos': 'Lao PDR',\n            'Burma': 'Myanmar'\n        }\n\n        // Map data\n        const confirmedMapData = [];\n        data.forEach(function (country) {\n            let nameMatch = countryNameDict[country.name]\n            let translatedName = (nameMatch) ? nameMatch : country.name\n            let countryMapData = {\n                name: translatedName,\n                value: country.summary.confirmed.total1Mil\n            };\n            confirmedMapData.push(countryMapData);\n        });\n\n        const activeMapData = [];\n        data.forEach(function (country) {\n            let nameMatch = countryNameDict[country.name]\n            let translatedName = (nameMatch) ? nameMatch : country.name\n            let countryMapData = {\n                name: translatedName,\n                value: country.summary.active.total1Mil\n            };\n            activeMapData.push(countryMapData);\n        });\n\n        function getMapOptions(title, color, data) {\n            return {\n                title: {\n                    text: title,\n                    right: 5,\n                    bottom: 5,\n                    textStyle: {\n                        fontWeight: 'normal'\n                    }\n                },\n                tooltip: {\n                    trigger: 'item'\n                },\n                visualMap: {\n                    left: 'left',\n                    min: 50,\n                    max: 10000,\n                    inRange: {\n                        color: ['#f5f5f5', color]\n                    },\n                    text: ['50', '1 000'],\n                    calculable: true\n                },\n                series: [\n                    {\n                        name: title,\n                        type: 'map',\n                        mapType: 'world',\n                        roam: 'move',\n                        zoom: 1.2,\n                        emphasis: {itemStyle: {areaColor: 'red'}},\n                        label: {\n                            normal: {\n                                show: false\n                            },\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        data: data\n                    }\n                ]\n            }\n        }\n\n        const confirmedMapOptions = getMapOptions('Confirmed cases / 1 mil. pop.', Utils.CONFIRMED_COLOR, confirmedMapData);\n        const activeMapOptions = getMapOptions('Active cases / 1 mil. pop.', Utils.ACTIVE_COLOR, activeMapData);\n\n        function countryLink(countryName) {\n            return <a href={\"#/\" + countryName} target=\"_blank\" rel=\"noopener noreferrer\">{countryName}</a>;\n        }\n\n        function sortCaret(order) {\n            if (!order) return (<span className=\"order\">&nbsp;</span>);\n            else if (order === 'asc') return (<span className=\"caret-asc\">&nbsp;</span>);\n            else if (order === 'desc') return (<span className=\"caret-desc\">&nbsp;</span>);\n            return null;\n        }\n\n        const {ToggleList} = ColumnToggle;\n\n        const columns = [{\n            dataField: 'name',\n            text: 'Country',\n            sort: true,\n            filter: textFilter({\n                placeholder: 'filter',\n                style: {\n                    backgroundColor: '#f5f5f5',\n                    border: 0,\n                    margin: 5,\n                    color: '#d3d3d3',\n                    fontStyle: 'italic'\n                }\n            }),\n            align: 'left',\n            formatter: countryLink,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.total',\n            text: 'Total cases',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.total1Mil',\n            text: 'Total cases/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.new',\n            text: 'New cases',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.confirmed.new1Mil',\n            text: 'New cases/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.active.total',\n            text: 'Active cases',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.active.total1Mil',\n            text: 'Active cases/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.total',\n            text: 'Total deceased',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.total1Mil',\n            text: 'Deceased/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.new',\n            text: 'Deceased new',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.deaths.new1Mil',\n            text: 'Deceased new/1M pop.',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.recovered.total',\n            text: 'Recovered',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'summary.recovered.new',\n            text: 'Recovered new',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }, {\n            dataField: 'population',\n            text: 'Population',\n            sort: true,\n            align: 'right',\n            formatter: Utils.formattedNumber,\n            sortCaret: sortCaret\n        }];\n\n        const defaultSorted = [{\n            dataField: 'summary.confirmed.total',\n            order: 'desc'\n        }];\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>COVID-19 dashboard</h1></Col>\n                    <Col className=\"text-right\"><a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\"\n                                                   rel=\"noopener noreferrer\">data source</a></Col>\n                </Row>\n                <hr/>\n                <Row className=\"justify-content-between header\">\n                    <Col sm={3}>\n                        <div className=\"summary-box\">\n                            <span className=\"number\">{Utils.formattedNumber(world.summary.confirmed.total)}</span>\n                            <br/>\n                            <span className=\"description\">confirmed cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box\">\n                            <span className=\"number\">{Utils.formattedNumber(world.summary.active.total)}</span>\n                            <br/>\n                            <span className=\"description\">active cases</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(activeRate)} %</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box \">\n                            <span className=\"number\">{Utils.formattedNumber(world.summary.deaths.total)}</span>\n                            <br/>\n                            <span className=\"description\">deceased</span>\n                            <br/>\n                            <span\n                                className=\"fine\">{Utils.formattedNumber(deathRateClosed)} % out of closed, {Utils.formattedNumber(deathRateTotal)} % out of total</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box \">\n                            <span className=\"number\">{Utils.formattedNumber(world.summary.recovered.total)}</span>\n                            <br/>\n                            <span className=\"description\">recovered</span>\n                            <br/>\n                            <span\n                                className=\"fine\">{Utils.formattedNumber(recoveredRateClosed)} % out of closed, {Utils.formattedNumber(recoveredRateTotal)} % out of total</span>\n                        </div>\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-between header\">\n                    <Col sm={6}>\n                        <ReactEcharts\n                            option={confirmedMapOptions || {}}\n                            className='react_for_echarts'/>\n                    </Col>\n                    <Col sm={6}>\n                        <ReactEcharts\n                            option={activeMapOptions || {}}\n                            className='react_for_echarts'/>\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-between header\">\n                    <ResponsiveContainer height={250}>\n                        <BarChart width={730} height={250} data={world.timeline}\n                                  style={{margin: \"0 auto\"}}>\n                            <XAxis dataKey=\"date\"/>\n                            <YAxis domain={[0, 'dataMax+1']}/>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <Tooltip/>\n                            <Legend verticalAlign=\"bottom\" height={36}/>\n                            <Bar name=\"daily confirmed\" type=\"monotone\" dataKey=\"confirmedNew\"\n                                 stroke=\"none\"\n                                 fill={Utils.CONFIRMED_COLOR}/>\n                        </BarChart>\n                    </ResponsiveContainer>\n                </Row>\n                <Container fluid id=\"countries\">\n                    <ToolkitProvider\n                        keyField='name'\n                        data={data}\n                        columns={columns}\n                        columnToggle>\n                        {\n                            props => (\n                                <div>\n                                    <ToggleList\n                                        contextual=\"light\"\n                                        {...props.columnToggleProps} />\n                                    <hr/>\n                                    <BootstrapTable\n                                        {...props.baseProps}\n                                        filter={filterFactory()}\n                                        hover\n                                        bordered={false}\n                                        defaultSorted={defaultSorted}\n                                    />\n                                </div>\n                            )\n                        }\n                    </ToolkitProvider>\n                    <div>Data source: <a\n                        href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a>\n                    </div>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Utils from \"./utils\";\nimport rawData from './data/romania_graphs_ro.json'\nimport {\n    Area,\n    AreaChart,\n    Bar,\n    BarChart,\n    Brush,\n    ComposedChart,\n    Line,\n    LineChart,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from \"recharts\";\nimport DataService from \"./data-service\";\n\nexport default class Romania extends Component {\n    render() {\n        // calculate active cases\n        rawData.covid_romania.forEach(function (day) {\n            let active = day.total_cases - day.total_recovered - day.total_deaths\n            let closed = day.total_recovered + day.total_deaths\n            day.total_active = active;\n            day.percent_active = (active / day.total_cases * 100).toFixed(1);\n            day.percent_deceased_closed = (day.total_deaths / closed * 100).toFixed(1);\n            day.percent_deceased_total = (day.total_deaths / day.total_cases * 100).toFixed(1);\n            day.percent_recovered_closed = (day.total_recovered / closed * 100).toFixed(1);\n            day.percent_recovered_total = (day.total_recovered / day.total_cases * 100).toFixed(1);\n            day.percent_positive_tests_today = DataService.noNaN(parseInt(day.new_cases_today) / parseInt(day.new_tests_today) * 100).toFixed(1);\n\n            if (day.county_data) {\n                day.county_data.forEach(function (cty) {\n                    cty.cases_1_k_pop = (cty.total_cases / cty.county_population * 1000).toFixed(1);\n                });\n\n                day.county_data.sort((a, b) => (a.cases_1_k_pop < b.cases_1_k_pop) ? 1 : -1)\n            }\n        });\n\n        let lastDay = rawData.covid_romania[0]\n        let timelineData = rawData.covid_romania.reverse();\n\n        let counties = [];\n\n        // create initial county objects\n        lastDay.county_data.forEach(\n            function (cty) {\n                let ctyObj = {\n                    county_id: cty.county_id,\n                    county_name: cty.county_name,\n                    county_population: cty.county_population,\n                    timeline: []\n                }\n\n                counties.push(ctyObj)\n            }\n        );\n\n        // fill counties objects with timeline data\n        counties.forEach(function (county) {\n            timelineData.forEach(function (day) {\n                if (day.county_data) {\n                    let ctyDay = day.county_data.find(c => c.county_name === county.county_name);\n                    county.timeline.push(\n                        {\n                            reporting_date: day.reporting_date,\n                            total_cases: ctyDay.total_cases,\n                            cases_1_k_pop: ctyDay.cases_1_k_pop\n                        }\n                    )\n                }\n            });\n            // calculate new cases for each day\n            let day_before = 0\n            county.timeline.forEach(function (day) {\n                day[\"new_cases\"] = day.total_cases - day_before\n                day_before = day.total_cases\n            })\n        });\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>Romania</h1></Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col className=\"text-right\">Last update: {lastDay.reporting_date}</Col>\n                </Row>\n                {/* Top charts */}\n                <Row className=\"spaced-row\">\n                    <Col sm={6}>\n                        <ResponsiveContainer height={250}>\n                            <ComposedChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Area name=\"confirmed\" type=\"monotone\" dataKey=\"total_cases\"\n                                      stroke=\"none\"\n                                      fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                <Area name=\"active\" dot={false} dataKey=\"total_active\"\n                                      stroke=\"none\"\n                                      fillOpacity={0.5} fill={Utils.ACTIVE_COLOR}/>\n                            </ComposedChart>\n                        </ResponsiveContainer>\n                    </Col>\n                    <Col sm={6}>\n                        <ResponsiveContainer height={250}>\n                            <LineChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Line name=\"new cases\" type=\"monotone\" dataKey=\"new_cases_today\"\n                                      dot={false}\n                                      strokeWidth={2}\n                                      stroke={Utils.CONFIRMED_COLOR}/>\n                                <Line name=\"new recovered\" type=\"monotone\" dataKey=\"new_recovered_today\"\n                                      dot={false}\n                                      strokeWidth={2}\n                                      stroke={Utils.RECOVERED_COLOR}/>\n                                <Line name=\"new deceased\" type=\"monotone\" dataKey=\"new_deaths_today\"\n                                      dot={false}\n                                      strokeWidth={2}\n                                      stroke={Utils.DECEASED_COLOR}/>\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                {/* Summary boxes */}\n                <Row className=\"justify-content-between header\">\n                    <Col sm={3}>\n                        <div className=\"summary-box\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_cases)}</span>\n                            <br/>\n                            <span className=\"description\">confirmed cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_active)}</span>\n                            <br/>\n                            <span className=\"description\">active cases</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(lastDay.percent_active)} %</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box \">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_deaths)}</span>\n                            <br/>\n                            <span className=\"description\">deceased</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(lastDay.percent_deceased_closed)} % out of closed, {Utils.formattedNumber(lastDay.percent_deceased_total)} % out of total</span>\n                        </div>\n                    </Col>\n                    <Col sm={3}>\n                        <div className=\"summary-box \">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.total_recovered)}</span>\n                            <br/>\n                            <span className=\"description\">recovered</span>\n                            <br/>\n                            <span className=\"fine\">{Utils.formattedNumber(lastDay.percent_recovered_closed)} % out of closed, {Utils.formattedNumber(lastDay.percent_recovered_total)} % out of total</span>\n                        </div>\n                    </Col>\n                </Row>\n                <hr/>\n                {/* Main charts */}\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.new_cases_today)}</span>\n                            <br/>\n                            <span className=\"description\">confirmed new</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Bar name=\"daily new cases\" type=\"monotone\" dataKey=\"new_cases_today\"\n                                     stroke=\"none\"\n                                     fill={Utils.CONFIRMED_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.new_deaths_today)}</span>\n                            <br/>\n                            <span className=\"description\">deceased new</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Bar name=\"daily new deaths\" type=\"monotone\" dataKey=\"new_deaths_today\"\n                                     stroke=\"none\"\n                                     fillOpacity={0.6}\n                                     fill={Utils.DECEASED_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span className=\"number\">{Utils.formattedNumber(lastDay.intensive_care_right_now)}</span>\n                            <br/>\n                            <span className=\"description\">serious cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Bar name=\"ICU cases\" type=\"monotone\" dataKey=\"intensive_care_right_now\"\n                                     stroke=\"none\"\n                                     fillOpacity={1}\n                                     fill={Utils.ACTIVE_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n                            <span\n                                className=\"number\">{Utils.formattedNumber(lastDay.percent_positive_tests_today)}%</span>\n                            <br/>\n                            <span className=\"description\">new positive cases</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <ComposedChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis yAxisId=\"left\" orientation=\"left\" domain={[0, 100]}/>\n                                <YAxis yAxisId=\"right\" orientation=\"right\" domain={[\"0, dataMax + 1000\"]}/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Line name=\"percent of positive tests\" type=\"monotone\"\n                                      yAxisId=\"left\"\n                                      dataKey=\"percent_positive_tests_today\"\n                                      strokeWidth={2}\n                                      dot={false}\n                                      fillOpacity={1}\n                                      stroke={Utils.POSITIVITY_COLOR}/>\n                                <Bar name=\"case definition tests\" type=\"monotone\"\n                                     yAxisId=\"right\"\n                                     stackId=\"a\"\n                                     dataKey=\"tests_for_case_definition\"\n                                     stroke=\"none\"\n                                     fillOpacity={0.5}\n                                     fill={Utils.BRUSH_COLOR}/>\n                                <Bar name=\"on demand tests\" type=\"monotone\"\n                                     yAxisId=\"right\"\n                                     stackId=\"a\"\n                                     dataKey=\"tests_upon_request\"\n                                     stroke=\"none\"\n                                     fillOpacity={0.7}\n                                     fill={Utils.BRUSH_COLOR}/>\n                                <Bar name=\"previous tests reported today\" type=\"monotone\"\n                                     yAxisId=\"right\"\n                                     stackId=\"a\"\n                                     dataKey=\"tests_done_before_today_and_reported_today\"\n                                     stroke=\"none\"\n                                     fillOpacity={0.9}\n                                     fill={Utils.BRUSH_COLOR}/>\n                                <Line name=\"total tests\" type=\"monotone\"\n                                      yAxisId=\"right\"\n                                      dataKey=\"new_tests_today\"\n                                      stroke=\"none\"\n                                      fillOpacity={1}\n                                      fill={Utils.ACTIVE_COLOR}/>\n                            </ComposedChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <Row className=\"spaced-row\">\n                    <Col sm={2}>\n                        <div className=\"summary-box left\">\n<span\n    className=\"number\">{Utils.formattedNumber(lastDay.new_recovered_today)}</span>\n                            <br/>\n                            <span className=\"description\">new recoveries</span>\n                        </div>\n                    </Col>\n                    <Col sm={10}>\n                        <ResponsiveContainer height={250}>\n                            <BarChart data={timelineData} style={{margin: \"0 auto\"}}>\n                                <XAxis dataKey=\"reporting_date\"/>\n                                <YAxis orientation=\"right\"/>\n                                <Tooltip/>\n                                <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                       fill=\"none\" height={20}/>\n                                <Bar name=\"daily recoveries\" type=\"monotone\"\n                                     dataKey=\"new_recovered_today\"\n                                     stroke=\"none\"\n                                     fillOpacity={1}\n                                     fill={Utils.RECOVERED_COLOR}/>\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n                <hr/>\n                {/* Counties */}\n                {lastDay.county_data.map((county, index) => (\n                    <Row className=\"spaced-row\" key={index}>\n                        <Col>\n                            <div className=\"summary-box county-box left\">\n                                <span className=\"description county-name \">{county.county_name}</span>\n                                <br/>\n                                <span className=\"number\">{county.total_cases} ({county.cases_1_k_pop} &#8240;)</span>\n                                <br/>\n                                <span className=\"description\">total cases</span>\n                            </div>\n                        </Col>\n                        <Col>\n                            <ResponsiveContainer height={250}>\n                                <BarChart data={counties.find(c => c.county_name === county.county_name).timeline}\n                                          style={{margin: \"0 auto\"}}>\n                                    <XAxis dataKey=\"reporting_date\"/>\n                                    <YAxis orientation=\"right\" domain={[\"0\", 'dataMax+10']}/>\n                                    <Tooltip/>\n                                    <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                           fill=\"none\" height={20}/>\n                                    <Bar name=\"confirmed\" type=\"monotone\"\n                                         dataKey=\"new_cases\"\n                                         stroke=\"none\"\n                                         fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                </BarChart>\n                            </ResponsiveContainer>\n                        </Col>\n                        <Col>\n                            <ResponsiveContainer height={250}>\n                                <AreaChart data={counties.find(c => c.county_name === county.county_name).timeline}\n                                           style={{margin: \"0 auto\"}}>\n                                    <XAxis dataKey=\"reporting_date\"/>\n                                    <YAxis orientation=\"right\" domain={[\"0\", 'dataMax+10']}/>\n                                    <Tooltip/>\n                                    <Brush dataKey=\"reporting_date\" travellerWidth={1} stroke={Utils.BRUSH_COLOR}\n                                           fill=\"none\" height={20}/>\n                                    <Area name=\"confirmed\" type=\"monotone\"\n                                          dataKey=\"total_cases\"\n                                          stroke=\"none\"\n                                          fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                </AreaChart>\n                            </ResponsiveContainer>\n                        </Col>\n                    </Row>\n                ))}\n                <hr/>\n                {/* Footer */}\n                <Row className=\"spaced-row\">\n                    <Col className=\"text-left\">\n                        <a href=\"#/\">All countries</a>\n                    </Col>\n                    <Col className=\"text-right\"><p>Data sources:</p>\n                        <a href=\"https://www.graphs.ro\">graphs.ro</a><br/>\n                        <a href=\"https://stirioficiale.ro\">stirioficiale.ro</a>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport DataService from './data-service';\nimport {Card, CardDeck, Col, Container, Row} from 'react-bootstrap'\nimport {\n    Area,\n    AreaChart,\n    Bar,\n    BarChart,\n    CartesianGrid,\n    ComposedChart,\n    Legend,\n    Line,\n    LineChart,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport Utils from './utils';\nimport Romania from \"./romania\";\n\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const {params} = this.props.match;\n        this.countryName = params.countryName;\n    }\n\n    render() {\n        if (this.countryName === \"Romania\") {\n            return (<Romania/>)\n        }\n\n        const data = DataService.getCountryData(this.countryName);\n\n        const activeRate = (data.summary.active.total / data.summary.confirmed.total * 100).toFixed(1);\n        const recoveredRateTotal = (data.summary.recovered.total / data.summary.confirmed.total * 100).toFixed(1);\n        const recoveredRateClosed = (data.summary.recovered.total / data.summary.closed.total * 100).toFixed(1);\n        const deathRateTotal = (data.summary.deaths.total / data.summary.confirmed.total * 100).toFixed(1);\n        const deathRateClosed = (data.summary.deaths.total / data.summary.closed.total * 100).toFixed(1);\n\n        // const timelineSliced = data.timeline.slice(-1 * 30);\n        data.timeline = data.timeline.filter(item => item.confirmedTotal !== 0);\n\n        // console.log(data)\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>{this.countryName}</h1></Col>\n                    <Col className=\"text-right\"><a href=\"#/\">All countries</a></Col>\n                </Row>\n                <hr/>\n                <Container fluid id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\"}}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.confirmed.total)}<br/>&nbsp;<br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\"}}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.active.total)}<br/><small\n                                    className=\"text-muted\">{activeRate}% out of total</small><br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\"}}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.recovered.total)}<br/><small\n                                    className=\"text-muted\">{recoveredRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\"}}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.deaths.total)}<br/><small\n                                    className=\"text-muted\">{deathRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container fluid id=\"charts\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header>Total cases</Card.Header>\n                            <Card.Body>\n                                <ResponsiveContainer height={250}>\n                                    <ComposedChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Area name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\"\n                                              stroke=\"none\"\n                                              fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                        <Line name=\"active\" dot={false} dataKey=\"activeTotal\"\n                                              stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\"/>\n                                    </ComposedChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <AreaChart width={730} height={250} data={data.timeline} style={{margin: \"0 auto\"}}\n                                               stackOffset=\"expand\">\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Area name=\"active\" type=\"monotone\" dataKey=\"activeTotal\"\n                                              stackId=\"1\"\n                                              stroke=\"none\" fillOpacity={0.5} fill={Utils.ACTIVE_COLOR}/>\n                                        <Area name=\"closed\" type=\"monotone\" dataKey=\"closedTotal\"\n                                              stackId=\"1\"\n                                              stroke=\"none\" fillOpacity={0.5} fill={Utils.CLOSED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <LineChart width={730} height={250} data={data.timeline}\n                                               style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+2']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\"/>\n                                        <Line name=\"% deceased out of closed cases\" dot={false}\n                                              strokeWidth=\"3\"\n                                              dataKey=\"deathRateClosedCases\" stroke={Utils.ACTIVE_COLOR}/>\n                                        <Line name=\"% deceased out of total cases\" dot={false}\n                                              strokeWidth=\"3\"\n                                              dataKey=\"deathRateTotalCases\" stroke={Utils.DECEASED_COLOR}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Daily cases</Card.Header>\n                            <Card.Body>\n                                <ResponsiveContainer height={250}>\n                                    <ComposedChart width={730} height={250} data={data.timeline}\n                                                   style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+1']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\"/>\n                                        <Line name=\"confirmed\" dot={false} dataKey=\"confirmedNew\"\n                                              stroke={Utils.CONFIRMED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Line name=\"recovered\" dot={false} dataKey=\"recoveredNew\"\n                                              stroke={Utils.RECOVERED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Line name=\"deceased\" dot={false} dataKey=\"deathsNew\"\n                                              stroke={Utils.DECEASED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Bar name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                        <Bar name=\"recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.RECOVERED_COLOR}/>\n                                        <Bar name=\"deceased\" type=\"monotone\" dataKey=\"deathsNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.DECEASED_COLOR}/>\n                                    </ComposedChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <BarChart width={730} height={250} data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+1']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Bar name=\"newly confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\"\n                                             stroke=\"none\"\n                                             fill={Utils.CONFIRMED_COLOR}/>\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Countries from './countries';\nimport Country from './country';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <HashRouter basename='/covid-19'>\n                    <Switch>\n                        <Route exact path={'/'} component={Countries}/>\n                        <Route exact path={'/:countryName'} component={Country}/>\n                    </Switch>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}