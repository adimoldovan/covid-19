{"version":3,"sources":["data-service.js","countries.jsx","charts.jsx","country.jsx","App.js","serviceWorker.js","index.js"],"names":["DataService","countries","confirmedData","map","val","name","country","confirmed","total","recovered","deaths","getCountryData","list","countryName","i","length","forEach","item","recoveredData","deathsData","console","log","timeline","Countries","props","state","getCountriesSummaryData","List","valueNames","Container","id","className","placeholder","colSpan","data-sort","icon","faSort","this","index","key","href","target","rel","new","Component","Charts","getCountriesTimelineData","find","c","data","Object","keys","date","confirmedTotal","confirmedNew","recoveredTotal","recoveredNew","deathsTotal","deathsNew","active","closed","confirmedColor","recoveredColor","deathsColor","activeColor","closedColor","height","style","margin","dataKey","strokeDasharray","verticalAlign","type","stroke","fillOpacity","fill","width","stackId","stackOffset","Country","params","match","summaryData","countrySummaryData","growth","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fee30625.chunk.js","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n\n    static getCountriesSummaryData() {\n        let countries = confirmedData.map(function (val) {\n            return { name: val.country, confirmed: val.total, recovered: {}, deaths: {} };\n        })\n\n        countries.forEach(populateCountryData)\n\n        function populateCountryData(item) {\n            item.recovered = getCountryData(recoveredData, item.name)\n            item.deaths = getCountryData(deathsData, item.name)\n        }\n\n        function getCountryData(list, countryName) {\n            for (var i = 0; i < list.length; i++) {\n                if (list[i].country === countryName) {\n                    return list[i].total;\n                }\n            }\n        }\n\n        console.log(countries)\n        return countries;\n    }\n\n    static getCountriesTimelineData() {\n        let countries = confirmedData.map(function (val) {\n            return { name: val.country, confirmed: val.timeline, recovered: {}, deaths: {} };\n        })\n\n        countries.forEach(populateCountryData)\n\n        function populateCountryData(item) {\n            item.recovered = getCountryData(recoveredData, item.name)\n            item.deaths = getCountryData(deathsData, item.name)\n        }\n\n        function getCountryData(list, countryName) {\n            for (var i = 0; i < list.length; i++) {\n                if (list[i].country === countryName) {\n                    return list[i].timeline;\n                }\n            }\n        }\n\n        console.log(countries)\n        return countries;\n    }\n}","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container } from 'react-bootstrap';\nimport \"list.js\";\nimport List from 'list.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Countries extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: DataService.getCountriesSummaryData()\n        };\n    }\n\n    componentDidMount() {\n        var options = {\n            valueNames: ['name', 'confirmedTotal', 'confirmedNew', 'deathsTotal', 'deathsNew', 'recoveredTotal', 'recoveredNew']\n        };\n\n        var countriesList = new List('countries', options);\n    }\n\n    render() {\n\n\n        return (\n            <Container id=\"countries\">\n                <table className=\"table table-hover table-condensed\">\n                    <thead>\n                        <tr>\n                            <th><input className=\"search\" placeholder=\"Filter\" /></th>\n                            <th colSpan=\"2\">Confirmed</th>\n                            <th colSpan=\"2\">Deaths</th>\n                            <th colSpan=\"2\">Recovered</th>\n                        </tr>\n                        <tr>\n                            <td className=\"sort\" data-sort=\"name\">Country <FontAwesomeIcon icon={faSort} /></td>\n                            <td className=\"text-right sort\" data-sort=\"confirmedTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                            <td className=\"text-right sort\" data-sort=\"confirmedNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                            <td className=\"text-right sort\" data-sort=\"deathsTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                            <td className=\"text-right sort\" data-sort=\"deathsNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                            <td className=\"text-right sort\" data-sort=\"recoveredTotal\">Total <FontAwesomeIcon icon={faSort} /></td>\n                            <td className=\"text-right sort\" data-sort=\"recoveredNew\">New <FontAwesomeIcon icon={faSort} /></td>\n                        </tr>\n                    </thead>\n                    <tbody className=\"list\">\n                        {\n                            this.state.countries.map((country, index) =>\n                                <tr key={index}>\n                                    <td className=\"text-left name\"><a href={\"#/\" + country.name} target=\"_blank\" rel=\"noopener noreferrer\">{country.name}</a></td>\n                                    <td className=\"text-right confirmedTotal\">{country.confirmed.total}</td>\n                                    <td className=\"text-right confirmedNew\">{country.confirmed.new}</td>\n                                    <td className=\"text-right deathsTotal\">{country.deaths.total}</td>\n                                    <td className=\"text-right deathsNew\">{country.deaths.new}</td>\n                                    <td className=\"text-right recoveredTotal\">{country.recovered.total}</td>\n                                    <td className=\"text-right recoveredNew\">{country.recovered.new}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <div>Data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a></div>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Area, Tooltip, Legend, BarChart, Bar, ResponsiveContainer, LineChart, Line } from 'recharts';\nimport DataService from './data-service';\nimport { Container } from 'react-bootstrap';\n\nexport default class Charts extends Component {\n    constructor(props) {\n        super(props);\n\n        var rawTimelineData = DataService.getCountriesTimelineData();\n        var timeline = rawTimelineData.find(c => c.name === props.countryName);\n        console.log(timeline);\n        console.log(timeline.confirmed);\n\n        this.data = Object.keys(timeline.confirmed).map(function (key) {\n\n            return {\n                date: key,\n                confirmedTotal: timeline.confirmed[key].total,\n                confirmedNew: timeline.confirmed[key].new,\n                recoveredTotal: timeline.recovered[key].total,\n                recoveredNew: timeline.recovered[key].new,\n                deathsTotal: timeline.deaths[key].total,\n                deathsNew: timeline.deaths[key].new,\n                active: timeline.confirmed[key].total - (timeline.recovered[key].total + timeline.deaths[key].total),\n                closed: timeline.recovered[key].total + timeline.deaths[key].total\n            };\n        });\n\n        console.log(this.data);\n\n        this.confirmedColor = \"#ffc658\";\n        this.recoveredColor = \"#82ca9d\";\n        this.deathsColor = \"#1c1c1c\";\n        this.activeColor = \"#fca085\";\n        this.closedColor = \"#8884d8\";\n    }\n\n    render() {\n        return (\n            <Container>\n                <h3>Confirmed cases</h3>\n                <ResponsiveContainer height={250}>\n                    <AreaChart data={this.data} style={{ margin: \"0 auto\" }}>\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <Tooltip />\n                        <Legend verticalAlign=\"top\" height={36}/>\n                        <Area name=\"confirmed cases\" type=\"monotone\" dataKey=\"confirmedTotal\" stroke=\"none\" fillOpacity={0.5} fill={this.confirmedColor} />\n                    </AreaChart>\n                </ResponsiveContainer>\n                <h3>Daily mixed</h3>\n                <ResponsiveContainer height={250}>\n                    <BarChart width={730} height={250} data={this.data} style={{ margin: \"0 auto\" }}>\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <Tooltip />\n                        <Legend verticalAlign=\"top\" height={36}/>\n                        <Bar name=\"new confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.confirmedColor} />\n                        <Bar name=\"new recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.recoveredColor} />\n                        <Bar name=\"new deaths\" type=\"monotone\" dataKey=\"deathsNew\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.deathsColor} />\n                    </BarChart>\n                </ResponsiveContainer>\n                <h3>Daily new confirmed cases</h3>\n                <ResponsiveContainer height={250}>\n                    <BarChart width={730} height={250} data={this.data} style={{ margin: \"0 auto\" }}>\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <Tooltip />\n                        <Legend verticalAlign=\"top\" height={36}/>\n                        <Bar name=\"new confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\" fillOpacity={0.5} fill={this.confirmedColor} />\n                    </BarChart>\n                </ResponsiveContainer>\n                <h3>Active vs closed cases</h3>\n                <ResponsiveContainer height={250}>\n                    <AreaChart width={730} height={250} data={this.data} style={{ margin: \"0 auto\" }}>\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <Tooltip />\n                        <Legend verticalAlign=\"top\" height={36}/>\n                        <Area name=\"active\" type=\"monotone\" dataKey=\"active\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.activeColor} />\n                        <Area name=\"closed (recovered + deaths)\" type=\"monotone\" dataKey=\"closed\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.closedColor} />\n                    </AreaChart>\n                </ResponsiveContainer>\n                <h3>Stacked active, recovered and deaths</h3>\n                <ResponsiveContainer height={250}>\n                    <AreaChart width={730} height={250} data={this.data} style={{ margin: \"0 auto\" }} stackOffset=\"expand\">\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <Tooltip />\n                        <Legend verticalAlign=\"top\" height={36}/>\n                        <Area name=\"total active\" type=\"monotone\" dataKey=\"active\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.activeColor} />\n                        <Area name=\"total recovered\" type=\"monotone\" dataKey=\"recoveredTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.recoveredColor} />\n                        <Area name=\"total deaths\" type=\"monotone\" dataKey=\"deathsTotal\" stackId=\"1\" stroke=\"none\" fillOpacity={0.5} fill={this.deathsColor} />\n                    </AreaChart>\n                </ResponsiveContainer>\n                <h3>New confirmed vs new recoveries</h3>\n                <ResponsiveContainer height={250}>\n                    <LineChart width={730} height={250} data={this.data} style={{ margin: \"0 auto\" }}>\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <Tooltip />\n                        <Legend verticalAlign=\"top\" height={36}/>\n                        <Line name=\"new confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\" stroke={this.confirmedColor} />\n                        <Line name=\"new recovered cases\" type=\"monotone\" dataKey=\"recoveredNew\" stroke={this.recoveredColor} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </Container>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport DataService from './data-service';\nimport { Container } from 'react-bootstrap'\nimport Charts from './charts';\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const { params } = this.props.match\n\n        var summaryData = DataService.getCountriesSummaryData();\n        this.countrySummaryData = summaryData.find(c => c.name === params.countryName);\n        console.log(this.countrySummaryData);\n    }\n    render() {\n        return (\n            <Container>\n                <table className=\"table table-condensed\">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th colSpan=\"3\">Confirmed</th>\n                            <th colSpan=\"3\">Deaths</th>\n                            <th colSpan=\"3\">Recovered</th>\n                        </tr>\n                        <tr>\n                            <td className=\"text-left\"><a href=\"#/\">All countries</a></td>\n                            <td className=\"text-right\">Total</td>\n                            <td className=\"text-right\">New</td>\n                            <td className=\"text-right\">Growth</td>\n                            <td className=\"text-right\">Total</td>\n                            <td className=\"text-right\">New</td>\n                            <td className=\"text-right\">Growth</td>\n                            <td className=\"text-right\">Total</td>\n                            <td className=\"text-right\">New</td>\n                            <td className=\"text-right\">Growth</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td className=\"text-left\">{this.countrySummaryData.name}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.confirmed.total}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.confirmed.new}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.confirmed.growth}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.deaths.total}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.deaths.new}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.deaths.growth}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.recovered.total}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.recovered.new}</td>\n                            <td className=\"text-right\">{this.countrySummaryData.recovered.growth}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <Charts countryName={this.countrySummaryData.name} />\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Countries from './countries';\nimport Country from './country';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter basename='/covid-19'>\n          <Switch>\n            <Route exact path={'/'} component={Countries} />\n            <Route path={'/:countryName'} component={Country} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}