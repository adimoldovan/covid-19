{"ast":null,"code":"import _classCallCheck from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import confirmedData from'./data/confirmed.json';import recoveredData from'./data/recovered.json';import deathsData from'./data/deaths.json';var DataService=/*#__PURE__*/function(){function DataService(){_classCallCheck(this,DataService);}_createClass(DataService,null,[{key:\"getVerboseData\",value:function getVerboseData(){return confirmedData.map(function(obj){return DataService.getCountryData(obj.country);});}},{key:\"getCountryData\",value:function getCountryData(countryName){var countryConfirmed=confirmedData.find(function(c){return c.country===countryName;});var countryRecovered=recoveredData.find(function(c){return c.country===countryName;});var countryDeaths=deathsData.find(function(c){return c.country===countryName;});var countryData={name:countryName,population:countryConfirmed.population,summary:{confirmed:{new:countryConfirmed.total.new,new1Mil:this.noNaN(parseInt(countryConfirmed.total.new/parseInt(countryConfirmed.population)*1000000)),total:countryConfirmed.total.total,total1Mil:this.noNaN(parseInt(countryConfirmed.total.total/parseInt(countryConfirmed.population)*1000000))},recovered:{new:countryRecovered.total.new,total:countryRecovered.total.total},deaths:{new:countryDeaths.total.new,new1Mil:this.noNaN(parseInt(countryDeaths.total.new/parseInt(countryDeaths.population)*1000000)),total:countryDeaths.total.total,total1Mil:this.noNaN(parseInt(countryDeaths.total.total/parseInt(countryDeaths.population)*1000000))},closed:{new:countryDeaths.total.new+countryRecovered.total.new,total:countryDeaths.total.total+countryRecovered.total.total},active:{new:countryConfirmed.total.new-(countryDeaths.total.new+countryRecovered.total.new),total:countryConfirmed.total.total-(countryDeaths.total.total+countryRecovered.total.total),total1Mil:this.noNaN(parseInt((countryConfirmed.total.total-(countryDeaths.total.total+countryRecovered.total.total))/parseInt(countryConfirmed.population)*1000000))}},timeline:{}};countryData.timeline=Object.keys(countryConfirmed.timeline).map(function(key){return{date:key,confirmedNew:countryConfirmed.timeline[key].new,confirmedTotal:countryConfirmed.timeline[key].total,deathsNew:countryDeaths.timeline[key].new,deathsTotal:countryDeaths.timeline[key].total,recoveredNew:countryRecovered.timeline[key].new,recoveredTotal:countryRecovered.timeline[key].total,closedNew:countryDeaths.timeline[key].new+countryRecovered.timeline[key].new,closedTotal:countryDeaths.timeline[key].total+countryRecovered.timeline[key].total,activeNew:countryConfirmed.timeline[key].new-(countryDeaths.timeline[key].new+countryRecovered.timeline[key].new),activeTotal:countryConfirmed.timeline[key].total-(countryDeaths.timeline[key].total+countryRecovered.timeline[key].total),deathRateClosedCases:Number((countryDeaths.timeline[key].total/(countryDeaths.timeline[key].total+countryRecovered.timeline[key].total)*100).toFixed(1)),deathRateTotalCases:Number((countryDeaths.timeline[key].total/countryConfirmed.timeline[key].total*100).toFixed(1))};});// console.log(countryData)\nreturn countryData;}},{key:\"getConfirmedTimelines\",value:function getConfirmedTimelines(countries){// get all dates\nvar dates=Object.keys(confirmedData[0].timeline).map(function(d){return d;});var data=dates.map(function(d){return{date:d};});countries.forEach(function(countryName){var confirmedTimeline=confirmedData.find(function(c){return c.country===countryName;});data.forEach(function(obj){obj[countryName]=confirmedTimeline.timeline[obj.date].total;});});// console.log(data);\nreturn data;}},{key:\"noNaN\",value:function noNaN(n){return isNaN(n)?0:n;}}]);return DataService;}();export{DataService as default};","map":{"version":3,"sources":["/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/src/data-service.js"],"names":["confirmedData","recoveredData","deathsData","DataService","map","obj","getCountryData","country","countryName","countryConfirmed","find","c","countryRecovered","countryDeaths","countryData","name","population","summary","confirmed","new","total","new1Mil","noNaN","parseInt","total1Mil","recovered","deaths","closed","active","timeline","Object","keys","key","date","confirmedNew","confirmedTotal","deathsNew","deathsTotal","recoveredNew","recoveredTotal","closedNew","closedTotal","activeNew","activeTotal","deathRateClosedCases","Number","toFixed","deathRateTotalCases","countries","dates","d","data","forEach","confirmedTimeline","n","isNaN"],"mappings":"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","sourcesContent":["import confirmedData from './data/confirmed.json';\nimport recoveredData from './data/recovered.json';\nimport deathsData from './data/deaths.json';\n\nexport default class DataService {\n    static getVerboseData() {\n        return confirmedData.map(function (obj) {\n            return DataService.getCountryData(obj.country);\n        });\n    }\n\n    static getCountryData(countryName) {\n        const countryConfirmed = confirmedData.find(c => c.country === countryName);\n        const countryRecovered = recoveredData.find(c => c.country === countryName);\n        const countryDeaths = deathsData.find(c => c.country === countryName);\n\n        const countryData = {\n            name: countryName,\n            population: countryConfirmed.population,\n            summary: {\n                confirmed: {\n                    new: countryConfirmed.total.new,\n                    new1Mil: this.noNaN(parseInt((countryConfirmed.total.new / parseInt(countryConfirmed.population)) * 1000000)),\n                    total: countryConfirmed.total.total,\n                    total1Mil: this.noNaN(parseInt((countryConfirmed.total.total / parseInt(countryConfirmed.population)) * 1000000)),\n                },\n                recovered: {\n                    new: countryRecovered.total.new,\n                    total: countryRecovered.total.total,\n                },\n                deaths: {\n                    new: countryDeaths.total.new,\n                    new1Mil: this.noNaN(parseInt((countryDeaths.total.new / parseInt(countryDeaths.population)) * 1000000)),\n                    total: countryDeaths.total.total,\n                    total1Mil: this.noNaN(parseInt((countryDeaths.total.total / parseInt(countryDeaths.population)) * 1000000)),\n                },\n                closed: {\n                    new: countryDeaths.total.new + countryRecovered.total.new,\n                    total: countryDeaths.total.total + countryRecovered.total.total\n                },\n                active: {\n                    new: countryConfirmed.total.new - (countryDeaths.total.new + countryRecovered.total.new),\n                    total: countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total),\n                    total1Mil: this.noNaN(parseInt(((countryConfirmed.total.total - (countryDeaths.total.total + countryRecovered.total.total)) / parseInt(countryConfirmed.population)) * 1000000))\n                }\n            },\n            timeline: {}\n        };\n\n        countryData.timeline = Object.keys(countryConfirmed.timeline).map(function (key) {\n            return {\n                date: key,\n                confirmedNew: countryConfirmed.timeline[key].new,\n                confirmedTotal: countryConfirmed.timeline[key].total,\n                deathsNew: countryDeaths.timeline[key].new,\n                deathsTotal: countryDeaths.timeline[key].total,\n                recoveredNew: countryRecovered.timeline[key].new,\n                recoveredTotal: countryRecovered.timeline[key].total,\n                closedNew: countryDeaths.timeline[key].new + countryRecovered.timeline[key].new,\n                closedTotal: countryDeaths.timeline[key].total + countryRecovered.timeline[key].total,\n                activeNew: countryConfirmed.timeline[key].new - (countryDeaths.timeline[key].new + countryRecovered.timeline[key].new),\n                activeTotal: countryConfirmed.timeline[key].total - (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total),\n                deathRateClosedCases: Number(((countryDeaths.timeline[key].total / (countryDeaths.timeline[key].total + countryRecovered.timeline[key].total)) * 100).toFixed(1)),\n                deathRateTotalCases: Number(((countryDeaths.timeline[key].total / countryConfirmed.timeline[key].total) * 100).toFixed(1))\n            };\n        });\n\n        // console.log(countryData)\n        return countryData;\n    }\n\n    static getConfirmedTimelines(countries) {\n        // get all dates\n        const dates = Object.keys(confirmedData[0].timeline).map(function (d) {\n            return d\n        });\n\n        const data = dates.map(function (d) {\n            return {\n                date: d\n            }\n        });\n\n\n        countries.forEach(function (countryName) {\n            const confirmedTimeline = confirmedData.find(c => c.country === countryName);\n            data.forEach(function (obj) {\n                obj[countryName] = confirmedTimeline.timeline[obj.date].total;\n            });\n        });\n\n        // console.log(data);\n        return data;\n    }\n\n    static noNaN(n) {\n        return isNaN(n) ? 0 : n;\n    }\n}"]},"metadata":{},"sourceType":"module"}