{"ast":null,"code":"import _classCallCheck from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import DataService from'./data-service';import{Card,CardDeck,Col,Container,Row}from'react-bootstrap';import{Area,AreaChart,Bar,BarChart,CartesianGrid,ComposedChart,Legend,Line,LineChart,ResponsiveContainer,Tooltip,XAxis,YAxis}from'recharts';import Utils from'./utils';import Romania from\"./romania\";var Country=/*#__PURE__*/function(_Component){_inherits(Country,_Component);var _super=_createSuper(Country);function Country(props){var _this;_classCallCheck(this,Country);_this=_super.call(this,props);var params=_this.props.match.params;_this.countryName=params.countryName;return _this;}_createClass(Country,[{key:\"render\",value:function render(){if(this.countryName===\"Romania\"){return/*#__PURE__*/React.createElement(Romania,null);}var data=DataService.getCountryData(this.countryName);var activeRate=(data.summary.active.total/data.summary.confirmed.total*100).toFixed(1);var recoveredRateTotal=(data.summary.recovered.total/data.summary.confirmed.total*100).toFixed(1);var recoveredRateClosed=(data.summary.recovered.total/data.summary.closed.total*100).toFixed(1);var deathRateTotal=(data.summary.deaths.total/data.summary.confirmed.total*100).toFixed(1);var deathRateClosed=(data.summary.deaths.total/data.summary.closed.total*100).toFixed(1);// const timelineSliced = data.timeline.slice(-1 * 30);\ndata.timeline=data.timeline.filter(function(item){return item.confirmedTotal!==0;});// console.log(data)\nreturn/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-between header\"},/*#__PURE__*/React.createElement(Col,{className:\"text-left\"},/*#__PURE__*/React.createElement(\"h1\",null,this.countryName)),/*#__PURE__*/React.createElement(Col,{className:\"text-right\"},/*#__PURE__*/React.createElement(\"a\",{href:\"#/\"},\"All countries\"))),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Container,{fluid:true,id:\"summary\"},/*#__PURE__*/React.createElement(CardDeck,null,/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{style:{backgroundColor:Utils.CONFIRMED_COLOR,color:\"#333\"}},\"Confirmed\"),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,Utils.formattedNumber(data.summary.confirmed.total),/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\"),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:50},/*#__PURE__*/React.createElement(AreaChart,{data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(Area,{dataKey:\"confirmedNew\",stroke:\"none\",fill:Utils.CONFIRMED_COLOR}))))),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{style:{backgroundColor:Utils.ACTIVE_COLOR,color:\"#333\"}},\"Active\"),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,Utils.formattedNumber(data.summary.active.total),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},activeRate,\"% out of total\"),/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\"),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:50},/*#__PURE__*/React.createElement(AreaChart,{data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(Area,{dataKey:\"activeTotal\",fill:Utils.ACTIVE_COLOR,stroke:\"none\"}))))),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{style:{backgroundColor:Utils.RECOVERED_COLOR,color:\"#333\"}},\"Recovered\"),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,Utils.formattedNumber(data.summary.recovered.total),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},recoveredRateTotal,\"% out of total\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},recoveredRateClosed,\"% out of closed\")),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:50},/*#__PURE__*/React.createElement(AreaChart,{data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(Area,{dataKey:\"recoveredNew\",fill:Utils.RECOVERED_COLOR,stroke:\"none\"}))))),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{style:{backgroundColor:Utils.DECEASED_COLOR,color:\"#fff\"}},\"Deceased\"),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,Utils.formattedNumber(data.summary.deaths.total),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},deathRateTotal,\"% out of total\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},deathRateClosed,\"% out of closed\")),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:50},/*#__PURE__*/React.createElement(AreaChart,{data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(Area,{dataKey:\"deathsNew\",fill:Utils.DECEASED_COLOR,stroke:\"none\"}))))))),/*#__PURE__*/React.createElement(Container,{fluid:true,id:\"charts\"},/*#__PURE__*/React.createElement(CardDeck,null,/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Total cases\"),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(ResponsiveContainer,{height:250},/*#__PURE__*/React.createElement(ComposedChart,{data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,{verticalAlign:\"bottom\",height:36}),/*#__PURE__*/React.createElement(Area,{name:\"confirmed\",type:\"monotone\",dataKey:\"confirmedTotal\",stroke:\"none\",fillOpacity:0.5,fill:Utils.CONFIRMED_COLOR}),/*#__PURE__*/React.createElement(Line,{name:\"active\",dot:false,dataKey:\"activeTotal\",stroke:Utils.ACTIVE_COLOR,strokeWidth:\"2\"}))),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:250},/*#__PURE__*/React.createElement(AreaChart,{width:730,height:250,data:data.timeline,style:{margin:\"0 auto\"},stackOffset:\"expand\"},/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,{verticalAlign:\"bottom\",height:36}),/*#__PURE__*/React.createElement(Area,{name:\"active\",type:\"monotone\",dataKey:\"activeTotal\",stackId:\"1\",stroke:\"none\",fillOpacity:0.5,fill:Utils.ACTIVE_COLOR}),/*#__PURE__*/React.createElement(Area,{name:\"closed\",type:\"monotone\",dataKey:\"closedTotal\",stackId:\"1\",stroke:\"none\",fillOpacity:0.5,fill:Utils.CLOSED_COLOR}))),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:250},/*#__PURE__*/React.createElement(LineChart,{width:730,height:250,data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,{domain:[0,'dataMax+2']}),/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,{verticalAlign:\"bottom\"}),/*#__PURE__*/React.createElement(Line,{name:\"% deceased out of closed cases\",dot:false,strokeWidth:\"3\",dataKey:\"deathRateClosedCases\",stroke:Utils.ACTIVE_COLOR}),/*#__PURE__*/React.createElement(Line,{name:\"% deceased out of total cases\",dot:false,strokeWidth:\"3\",dataKey:\"deathRateTotalCases\",stroke:Utils.DECEASED_COLOR}))))),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Daily cases\"),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(ResponsiveContainer,{height:250},/*#__PURE__*/React.createElement(ComposedChart,{width:730,height:250,data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,{domain:[0,'dataMax+1']}),/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,{verticalAlign:\"bottom\"}),/*#__PURE__*/React.createElement(Line,{name:\"confirmed\",dot:false,dataKey:\"confirmedNew\",stroke:Utils.CONFIRMED_COLOR,strokeWidth:\"2\",legendType:\"none\"}),/*#__PURE__*/React.createElement(Line,{name:\"recovered\",dot:false,dataKey:\"recoveredNew\",stroke:Utils.RECOVERED_COLOR,strokeWidth:\"2\",legendType:\"none\"}),/*#__PURE__*/React.createElement(Line,{name:\"deceased\",dot:false,dataKey:\"deathsNew\",stroke:Utils.DECEASED_COLOR,strokeWidth:\"2\",legendType:\"none\"}),/*#__PURE__*/React.createElement(Bar,{name:\"confirmed\",type:\"monotone\",dataKey:\"confirmedNew\",stroke:\"none\",fillOpacity:0.5,fill:Utils.CONFIRMED_COLOR}),/*#__PURE__*/React.createElement(Bar,{name:\"recovered\",type:\"monotone\",dataKey:\"recoveredNew\",stroke:\"none\",fillOpacity:0.5,fill:Utils.RECOVERED_COLOR}),/*#__PURE__*/React.createElement(Bar,{name:\"deceased\",type:\"monotone\",dataKey:\"deathsNew\",stroke:\"none\",fillOpacity:0.5,fill:Utils.DECEASED_COLOR}))),/*#__PURE__*/React.createElement(ResponsiveContainer,{height:250},/*#__PURE__*/React.createElement(BarChart,{width:730,height:250,data:data.timeline,style:{margin:\"0 auto\"}},/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,{domain:[0,'dataMax+1']}),/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,{verticalAlign:\"bottom\",height:36}),/*#__PURE__*/React.createElement(Bar,{name:\"newly confirmed cases\",type:\"monotone\",dataKey:\"confirmedNew\",stroke:\"none\",fill:Utils.CONFIRMED_COLOR}))))))));}}]);return Country;}(Component);export{Country as default};","map":{"version":3,"sources":["/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/src/country.jsx"],"names":["React","Component","DataService","Card","CardDeck","Col","Container","Row","Area","AreaChart","Bar","BarChart","CartesianGrid","ComposedChart","Legend","Line","LineChart","ResponsiveContainer","Tooltip","XAxis","YAxis","Utils","Romania","Country","props","params","match","countryName","data","getCountryData","activeRate","summary","active","total","confirmed","toFixed","recoveredRateTotal","recovered","recoveredRateClosed","closed","deathRateTotal","deaths","deathRateClosed","timeline","filter","item","confirmedTotal","backgroundColor","CONFIRMED_COLOR","color","formattedNumber","margin","ACTIVE_COLOR","RECOVERED_COLOR","DECEASED_COLOR","CLOSED_COLOR"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport DataService from './data-service';\nimport {Card, CardDeck, Col, Container, Row} from 'react-bootstrap'\nimport {\n    Area,\n    AreaChart,\n    Bar,\n    BarChart,\n    CartesianGrid,\n    ComposedChart,\n    Legend,\n    Line,\n    LineChart,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport Utils from './utils';\nimport Romania from \"./romania\";\n\n\nexport default class Country extends Component {\n    constructor(props) {\n        super(props);\n        const {params} = this.props.match;\n        this.countryName = params.countryName;\n    }\n\n    render() {\n        if (this.countryName === \"Romania\") {\n            return (<Romania/>)\n        }\n\n        const data = DataService.getCountryData(this.countryName);\n\n        const activeRate = (data.summary.active.total / data.summary.confirmed.total * 100).toFixed(1);\n        const recoveredRateTotal = (data.summary.recovered.total / data.summary.confirmed.total * 100).toFixed(1);\n        const recoveredRateClosed = (data.summary.recovered.total / data.summary.closed.total * 100).toFixed(1);\n        const deathRateTotal = (data.summary.deaths.total / data.summary.confirmed.total * 100).toFixed(1);\n        const deathRateClosed = (data.summary.deaths.total / data.summary.closed.total * 100).toFixed(1);\n\n        // const timelineSliced = data.timeline.slice(-1 * 30);\n        data.timeline = data.timeline.filter(item => item.confirmedTotal !== 0);\n\n        // console.log(data)\n\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-between header\">\n                    <Col className=\"text-left\"><h1>{this.countryName}</h1></Col>\n                    <Col className=\"text-right\"><a href=\"#/\">All countries</a></Col>\n                </Row>\n                <hr/>\n                <Container fluid id=\"summary\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.CONFIRMED_COLOR, color: \"#333\"}}>Confirmed</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.confirmed.total)}<br/>&nbsp;<br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"confirmedNew\" stroke=\"none\" fill={Utils.CONFIRMED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.ACTIVE_COLOR, color: \"#333\"}}>Active</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.active.total)}<br/><small\n                                    className=\"text-muted\">{activeRate}% out of total</small><br/>&nbsp;\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"activeTotal\" fill={Utils.ACTIVE_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.RECOVERED_COLOR, color: \"#333\"}}>Recovered</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.recovered.total)}<br/><small\n                                    className=\"text-muted\">{recoveredRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{recoveredRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"recoveredNew\" fill={Utils.RECOVERED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header\n                                style={{backgroundColor: Utils.DECEASED_COLOR, color: \"#fff\"}}>Deceased</Card.Header>\n                            <Card.Body>\n                                <Card.Title>\n                                    {Utils.formattedNumber(data.summary.deaths.total)}<br/><small\n                                    className=\"text-muted\">{deathRateTotal}% out of total</small><br/><small\n                                    className=\"text-muted\">{deathRateClosed}% out of closed</small>\n                                </Card.Title>\n                                <ResponsiveContainer height={50}>\n                                    <AreaChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <Area dataKey=\"deathsNew\" fill={Utils.DECEASED_COLOR} stroke=\"none\"/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n                <Container fluid id=\"charts\">\n                    <CardDeck>\n                        <Card>\n                            <Card.Header>Total cases</Card.Header>\n                            <Card.Body>\n                                <ResponsiveContainer height={250}>\n                                    <ComposedChart data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Area name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedTotal\"\n                                              stroke=\"none\"\n                                              fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                        <Line name=\"active\" dot={false} dataKey=\"activeTotal\"\n                                              stroke={Utils.ACTIVE_COLOR} strokeWidth=\"2\"/>\n                                    </ComposedChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <AreaChart width={730} height={250} data={data.timeline} style={{margin: \"0 auto\"}}\n                                               stackOffset=\"expand\">\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Area name=\"active\" type=\"monotone\" dataKey=\"activeTotal\"\n                                              stackId=\"1\"\n                                              stroke=\"none\" fillOpacity={0.5} fill={Utils.ACTIVE_COLOR}/>\n                                        <Area name=\"closed\" type=\"monotone\" dataKey=\"closedTotal\"\n                                              stackId=\"1\"\n                                              stroke=\"none\" fillOpacity={0.5} fill={Utils.CLOSED_COLOR}/>\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <LineChart width={730} height={250} data={data.timeline}\n                                               style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+2']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\"/>\n                                        <Line name=\"% deceased out of closed cases\" dot={false}\n                                              strokeWidth=\"3\"\n                                              dataKey=\"deathRateClosedCases\" stroke={Utils.ACTIVE_COLOR}/>\n                                        <Line name=\"% deceased out of total cases\" dot={false}\n                                              strokeWidth=\"3\"\n                                              dataKey=\"deathRateTotalCases\" stroke={Utils.DECEASED_COLOR}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Header>Daily cases</Card.Header>\n                            <Card.Body>\n                                <ResponsiveContainer height={250}>\n                                    <ComposedChart width={730} height={250} data={data.timeline}\n                                                   style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+1']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\"/>\n                                        <Line name=\"confirmed\" dot={false} dataKey=\"confirmedNew\"\n                                              stroke={Utils.CONFIRMED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Line name=\"recovered\" dot={false} dataKey=\"recoveredNew\"\n                                              stroke={Utils.RECOVERED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Line name=\"deceased\" dot={false} dataKey=\"deathsNew\"\n                                              stroke={Utils.DECEASED_COLOR} strokeWidth=\"2\" legendType=\"none\"/>\n                                        <Bar name=\"confirmed\" type=\"monotone\" dataKey=\"confirmedNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.CONFIRMED_COLOR}/>\n                                        <Bar name=\"recovered\" type=\"monotone\" dataKey=\"recoveredNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.RECOVERED_COLOR}/>\n                                        <Bar name=\"deceased\" type=\"monotone\" dataKey=\"deathsNew\" stroke=\"none\"\n                                             fillOpacity={0.5} fill={Utils.DECEASED_COLOR}/>\n                                    </ComposedChart>\n                                </ResponsiveContainer>\n                                <ResponsiveContainer height={250}>\n                                    <BarChart width={730} height={250} data={data.timeline} style={{margin: \"0 auto\"}}>\n                                        <XAxis dataKey=\"date\"/>\n                                        <YAxis domain={[0, 'dataMax+1']}/>\n                                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                                        <Tooltip/>\n                                        <Legend verticalAlign=\"bottom\" height={36}/>\n                                        <Bar name=\"newly confirmed cases\" type=\"monotone\" dataKey=\"confirmedNew\"\n                                             stroke=\"none\"\n                                             fill={Utils.CONFIRMED_COLOR}/>\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Container>\n            </Container>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}