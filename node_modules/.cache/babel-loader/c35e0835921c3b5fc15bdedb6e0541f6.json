{"ast":null,"code":"import _classCallCheck from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Utils=/*#__PURE__*/function(){function Utils(){_classCallCheck(this,Utils);}_createClass(Utils,null,[{key:\"formattedNumber\",value:function formattedNumber(n){return String(n).replace(/(.)(?=(\\d{3})+$)/g,'$1 ');}},{key:\"getRandomHexaColorCode\",value:function getRandomHexaColorCode(){var letters='0123456789ABCDEF';var color='#';for(var i=0;i<6;i++){color+=letters[Math.floor(Math.random()*16)];}return color;}},{key:\"getRandomColor\",value:function getRandomColor(){var colors=['red','blue','green','black','orange'];return colors[Math.floor(Math.random()*colors.length)];}},{key:\"filterOutliers\",value:function filterOutliers(dataSet){var _this=this;return dataSet.filter(function(x){return!_this.findOutliers(dataSet).includes(x);});}},{key:\"findOutliers\",value:function findOutliers(dataSet){if(dataSet.length<4){return[];}var values,q1,q3,iqr,maxValue,minValue;values=dataSet.slice().sort(function(a,b){return a-b;});if(values.length/4%1===0){q1=1/2*(values[values.length/4]+values[values.length/4+1]);q3=1/2*(values[values.length*(3/4)]+values[values.length*(3/4)+1]);}else{q1=values[Math.floor(values.length/4+1)];q3=values[Math.ceil(values.length*(3/4)+1)];}iqr=q3-q1;maxValue=q3+iqr*1.5;minValue=q1-iqr*1.5;return values.filter(function(x){return x>maxValue||x<minValue;});}}]);return Utils;}();export{Utils as default};Utils.CONFIRMED_COLOR=\"#ffc658\";Utils.RECOVERED_COLOR=\"#82ca9d\";Utils.DECEASED_COLOR=\"#1c1c1c\";Utils.ACTIVE_COLOR=\"#fca085\";Utils.CLOSED_COLOR=\"#8884d8\";Utils.POSITIVITY_COLOR=\"#C889A3\";Utils.BRUSH_COLOR=\"#919191\";Utils.TESTS_COLOR=\"#719df3\";","map":{"version":3,"sources":["/Users/adrian.moldovan/repo/github.com/adimoldovan/covid-19/src/utils.js"],"names":["Utils","n","String","replace","letters","color","i","Math","floor","random","colors","length","dataSet","filter","x","findOutliers","includes","values","q1","q3","iqr","maxValue","minValue","slice","sort","a","b","ceil","CONFIRMED_COLOR","RECOVERED_COLOR","DECEASED_COLOR","ACTIVE_COLOR","CLOSED_COLOR","POSITIVITY_COLOR","BRUSH_COLOR","TESTS_COLOR"],"mappings":"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","sourcesContent":["export default class Utils {\n    static formattedNumber(n) {\n        return String(n).replace(/(.)(?=(\\d{3})+$)/g, '$1 ')\n    }\n\n    static getRandomHexaColorCode() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    static getRandomColor() {\n        let colors = ['red', 'blue', 'green', 'black', 'orange'];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    static filterOutliers(dataSet) {\n        return dataSet.filter((x) => !this.findOutliers(dataSet).includes(x));\n    }\n\n    static findOutliers(dataSet) {\n        if (dataSet.length < 4) {\n            return [];\n        }\n\n        let values, q1, q3, iqr, maxValue, minValue;\n\n        values = dataSet.slice().sort((a, b) => a - b);\n\n        if ((values.length / 4) % 1 === 0) {\n            q1 = 1 / 2 * (values[(values.length / 4)] + values[(values.length / 4) + 1]);\n            q3 = 1 / 2 * (values[(values.length * (3 / 4))] + values[(values.length * (3 / 4)) + 1]);\n        } else {\n            q1 = values[Math.floor(values.length / 4 + 1)];\n            q3 = values[Math.ceil(values.length * (3 / 4) + 1)];\n        }\n\n        iqr = q3 - q1;\n        maxValue = q3 + iqr * 1.5;\n        minValue = q1 - iqr * 1.5;\n\n        return values.filter((x) => (x > maxValue) || (x < minValue));\n    }\n}\n\nUtils.CONFIRMED_COLOR = \"#ffc658\";\nUtils.RECOVERED_COLOR = \"#82ca9d\";\nUtils.DECEASED_COLOR = \"#1c1c1c\";\nUtils.ACTIVE_COLOR = \"#fca085\";\nUtils.CLOSED_COLOR = \"#8884d8\";\nUtils.POSITIVITY_COLOR = \"#C889A3\";\nUtils.BRUSH_COLOR = \"#919191\";\nUtils.TESTS_COLOR = \"#719df3\";\n\n"]},"metadata":{},"sourceType":"module"}